//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 25 2017 03:49:04).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AudioBuffer {
    unsigned int _field1;
    unsigned int _field2;
    void *_field3;
};

struct AudioBufferList {
    unsigned int _field1;
    struct AudioBuffer _field2[1];
};

struct AudioDeviceEventObserver;

struct AudioSessionObserver {
    CDUnknownFunctionPointerType *_field1;
};

struct AudioStreamBasicDescription {
    double mSampleRate;
    unsigned int mFormatID;
    unsigned int mFormatFlags;
    unsigned int mBytesPerPacket;
    unsigned int mFramesPerPacket;
    unsigned int mBytesPerFrame;
    unsigned int mChannelsPerFrame;
    unsigned int mBitsPerChannel;
    unsigned int mReserved;
};

struct ByteAudioAuxSinkApple {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    id _field3;
    id _field4;
    id _field5;
};

struct ByteAudioAuxStream {
    CDUnknownFunctionPointerType *_field1;
};

struct ByteAudioFilterApple {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    int _field3;
    int _field4;
    id _field5;
    id _field6;
    id _field7;
};

struct ByteAudioInputSinkApple {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    id _field3;
    id _field4;
    id _field5;
};

struct ByteAudioInputStream {
    CDUnknownFunctionPointerType *_field1;
};

struct ByteAudioOutputSinkApple {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    id _field3;
    id _field4;
    id _field5;
};

struct ByteAudioOutputStream {
    CDUnknownFunctionPointerType *_field1;
};

struct ByteAudioStreamBuffer {
    char *_field1;
    int _field2;
    struct ByteAudioStreamFormat _field3;
    unsigned short _field4;
    unsigned int _field5;
    unsigned short _field6;
    _Bool _field7;
    int _field8[8];
    int _field9;
    unsigned short _field10;
    unsigned short _field11;
    long long _field12;
    long long _field13;
    long long _field14;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field15;
};

struct ByteAudioStreamFormat {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
};

struct CriticalSection {
    struct _opaque_pthread_mutex_t {
        long long __sig;
        char __opaque[56];
    } mutex_;
    struct _opaque_pthread_t *thread_;
    int recursion_count_;
};

struct IByteAudioEngine {
    CDUnknownFunctionPointerType *_field1;
};

struct NetworkMonitorObserver {
    CDUnknownFunctionPointerType *_field1;
};

struct __list_node_base<ByteAudioEventHandlerApple *, void *> {
    struct __list_node_base<ByteAudioEventHandlerApple *, void *> *__prev_;
    struct __list_node_base<ByteAudioEventHandlerApple *, void *> *__next_;
};

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *_field1;
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *_field1;
                    unsigned long long _field2;
                    unsigned long long _field3;
                } _field1;
                struct __short {
                    char _field1[23];
                    struct {
                        unsigned char _field1;
                    } _field2;
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
};

struct iOSAudioRouter {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct AudioDeviceEventObserver *_field3;
};

struct list<ByteAudioEventHandlerApple *, std::__1::allocator<ByteAudioEventHandlerApple *>> {
    struct __list_node_base<ByteAudioEventHandlerApple *, void *> __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<ByteAudioEventHandlerApple *, void *>>> {
        unsigned long long __value_;
    } __size_alloc_;
};

struct map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct vector<__weak id<RTCAudioSessionDelegate>, std::__1::allocator<__weak id<RTCAudioSessionDelegate>>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<__weak id<RTCAudioSessionDelegate>*, std::__1::allocator<__weak id<RTCAudioSessionDelegate>>> {
        id *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
} map_0edfe763;

typedef struct vector<__weak id<RTCAudioSessionDelegate>, std::__1::allocator<__weak id<RTCAudioSessionDelegate>>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<__weak id<RTCAudioSessionDelegate>*, std::__1::allocator<__weak id<RTCAudioSessionDelegate>>> {
        id *__value_;
    } __end_cap_;
} vector_03b67401;

#pragma mark -

//
// File: byteaudio
// UUID: 4CD426C5-0D4E-3423-BF28-62668ABF463A
//
//                           Arch: arm64
//                Current version: 1.0.1
//          Compatibility version: 1.0.0
//                 Source version: 0.0.0.0.0
//            Minimum iOS version: 9.0.0
//                    SDK version: 14.5.0
//
// Objective-C Garbage Collection: Unsupported
//
//                       Run path: @executable_path/../Frameworks
//                               = /Frameworks
//                       Run path: @loader_path/Frameworks
//                               = /Frameworks
//                       Run path: @rpath
//                               = @rpath
//

@protocol ByteRtciOSAudioSessionNotifyDelegate <NSObject>
- (void)didOutputVolumeChanged:(float)arg1;
- (void)didScreenCaptureStateChanged:(_Bool)arg1;
- (void)didAudioMediaServerChanged:(_Bool)arg1;
- (void)didAudioInterruptionChanged:(_Bool)arg1;
- (void)didAudioRouteChanged:(long long)arg1 reason:(int)arg2;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol RTCAudioSessionActivationDelegate <NSObject>
- (void)audioSessionDidDeactivate:(AVAudioSession *)arg1;
- (void)audioSessionDidActivate:(AVAudioSession *)arg1;
@end

@protocol RTCAudioSessionDelegate <NSObject>

@optional
- (void)audioSession:(RTCAudioSession *)arg1 screenCaptureStateChanged:(_Bool)arg2;
- (void)audioSession:(RTCAudioSession *)arg1 failedToSetActive:(_Bool)arg2 error:(NSError *)arg3;
- (void)audioSession:(RTCAudioSession *)arg1 didSetActive:(_Bool)arg2;
- (void)audioSession:(RTCAudioSession *)arg1 willSetActive:(_Bool)arg2;
- (void)audioSession:(RTCAudioSession *)arg1 didDetectPlayoutGlitch:(long long)arg2;
- (void)audioSession:(RTCAudioSession *)arg1 didChangeOutputVolume:(float)arg2;
- (void)audioSessionDidStopPlayOrRecord:(RTCAudioSession *)arg1;
- (void)audioSessionDidStartPlayOrRecord:(RTCAudioSession *)arg1;
- (void)audioSessionMediaServerReset:(RTCAudioSession *)arg1;
- (void)audioSessionMediaServerTerminated:(RTCAudioSession *)arg1;
- (void)audioSessionDidChangeRoute:(RTCAudioSession *)arg1 reason:(unsigned long long)arg2 previousRoute:(AVAudioSessionRouteDescription *)arg3;
- (void)audioSessionDidEndInterruption:(RTCAudioSession *)arg1 shouldResumeSession:(_Bool)arg2;
- (void)audioSessionDidBeginInterruption:(RTCAudioSession *)arg1;
@end

@interface BDByteAudioCert : NSObject
{
    NSArray *_dataPrivacys;
    NSString *_sceneId;
    NSString *_tag;
    NSString *_usage;
    NSDictionary *_params;
}

+ (id)create;
@property(copy, nonatomic) NSDictionary *params; // @synthesize params=_params;
@property(copy, nonatomic) NSString *usage; // @synthesize usage=_usage;
@property(copy, nonatomic) NSString *tag; // @synthesize tag=_tag;
@property(copy, nonatomic) NSString *sceneId; // @synthesize sceneId=_sceneId;
@property(copy, nonatomic) NSArray *dataPrivacys; // @synthesize dataPrivacys=_dataPrivacys;
- (void).cxx_destruct;
@property(readonly, copy, nonatomic) CDUnknownBlockType updatePrivacyPolicys;
@property(readonly, copy, nonatomic) CDUnknownBlockType updateTag;
@property(readonly, copy, nonatomic) CDUnknownBlockType updateSceneId;
@property(readonly, copy, nonatomic) CDUnknownBlockType updateUsage;

@end

@interface BDByteAudioEntry : NSObject
{
}

+ (id)validatePrivacyCert:(id)arg1 context:(id)arg2;
+ (int)stopAudioOutputUnitWithAudioUnit:(struct OpaqueAudioComponentInstance *)arg1 privacyCert:(id)arg2 error:(id *)arg3;
+ (int)startAudioOutputUnitWithAudioUnit:(struct OpaqueAudioComponentInstance *)arg1 privacyCert:(id)arg2 error:(id *)arg3;

@end

@interface BDByteAudioPolicy : NSObject
{
    NSString *_uuid;
    NSString *_dataType;
    NSString *_statement;
    NSString *_version;
}

@property(copy, nonatomic) NSString *version; // @synthesize version=_version;
@property(copy, nonatomic) NSString *statement; // @synthesize statement=_statement;
@property(copy, nonatomic) NSString *dataType; // @synthesize dataType=_dataType;
@property(copy, nonatomic) NSString *uuid; // @synthesize uuid=_uuid;
- (void).cxx_destruct;
- (id)initWithUUID:(id)arg1 dataType:(id)arg2 statement:(id)arg3 version:(id)arg4;

@end

@interface BDByteAudioPolicyStore : NSObject
{
}

+ (id)getAudioPolicy;

@end

@interface ByteAudioEngine : NSObject
{
    struct IByteAudioEngine *byteAudioEngineCpp_;
    struct ByteAudioStreamBuffer *pushBufferCpp_;
    struct ByteAudioStreamBuffer *pullBufferCpp_;
    struct ByteAudioFilterApple *inputFilter_;
    struct ByteAudioFilterApple *frontInputFilter_;
    struct ByteAudioFilterApple *outputFilter_;
    struct list<ByteAudioEventHandlerApple *, std::__1::allocator<ByteAudioEventHandlerApple *>> eventHandlerCppList_;
}

+ (id)sharedInstance;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)getValue:(long long)arg1;
- (int)setValue:(long long)arg1 value:(id)arg2;
- (int)adjustPlaybackVolume:(long long)arg1;
- (int)adjustRecordVolume:(long long)arg1;
- (int)setAudioScenario:(long long)arg1;
- (int)adjustHeadsetMonitorVolume:(long long)arg1;
- (void)enableLocalAudio:(_Bool)arg1;
- (void)setOutputFilterWithSrAndChnnel:(id)arg1 sampleRate:(int)arg2 channel:(int)arg3;
- (void)setOutputFilter:(id)arg1;
- (void)setFrontInputFilter:(id)arg1 sampleRate:(int)arg2 channel:(int)arg3;
- (void)setInputFilter:(id)arg1 sampleRate:(int)arg2 channel:(int)arg3;
- (void)enableAudioRouter:(_Bool)arg1;
- (void)enableEarMonitor:(_Bool)arg1;
- (void)setEnableSpeakerphone:(_Bool)arg1;
- (int)releaseAuxStream:(id)arg1;
- (id)createAuxStream:(id)arg1;
- (int)releaseOutputStream:(id)arg1;
- (id)createOutputStream:(id)arg1;
- (int)releaseInputStream:(id)arg1;
- (id)createInputStream:(id)arg1;
- (void)removeEventDelegate:(id)arg1;
- (void)addEventDelegate:(id)arg1;
- (int)setServerConfigure:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface ByteAudioStreamFormat : NSObject
{
    int _sampleRate;
    int _channelNum;
    int _bitrateBps;
    int _frameSizeMs;
    long long _codecType;
}

@property(nonatomic) long long codecType; // @synthesize codecType=_codecType;
@property(nonatomic) int frameSizeMs; // @synthesize frameSizeMs=_frameSizeMs;
@property(nonatomic) int bitrateBps; // @synthesize bitrateBps=_bitrateBps;
@property(nonatomic) int channelNum; // @synthesize channelNum=_channelNum;
@property(nonatomic) int sampleRate; // @synthesize sampleRate=_sampleRate;
- (long long)getCodecType;
- (int)getChannelNum;
- (int)getSampleRate;

@end

@interface ByteAudioStreamBuffer : NSObject
{
    int _length;
    unsigned int _timestamp;
    char *_data;
    ByteAudioStreamFormat *_streamFormat;
}

@property(nonatomic) ByteAudioStreamFormat *streamFormat; // @synthesize streamFormat=_streamFormat;
@property(nonatomic) unsigned int timestamp; // @synthesize timestamp=_timestamp;
@property(nonatomic) int length; // @synthesize length=_length;
@property(nonatomic) char *data; // @synthesize data=_data;
- (id)getStreamFormat;
- (unsigned int)getTimeStamp;
- (int)getLength;
- (void)initWithComponents:(char *)arg1 format:(id)arg2;

@end

@interface ByteAudioTypeAdpter : NSObject
{
}

+ (id)statisReport2NSDictionary:(map_0edfe763)arg1;

@end

@interface ByteAudioInputStream : NSObject
{
    struct IByteAudioEngine *cppEngineInstance_;
    struct ByteAudioInputStream *cppStreamInstance_;
    struct ByteAudioInputSinkApple *streamSink_;
    id <ByteAudioInputSinkDelegate> _delegate;
}

- (void).cxx_destruct;
@property(nonatomic) __weak id <ByteAudioInputSinkDelegate> delegate; // @synthesize delegate=_delegate;
- (id)getReportStats;
- (void)setSinkDelegate:(id)arg1;
- (id)getValue:(long long)arg1;
- (int)setValue:(long long)arg1 Value:(id)arg2;
- (int)updateStreamFormat:(id)arg1;
- (int)setStreamFormat:(id)arg1;
- (int)setMute:(_Bool)arg1;
- (void)setGain:(long long)arg1;
- (int)stopStream;
- (int)startStream;
- (unsigned int)getId;
- (id)getName;
- (void)releaseStream;
- (id)initWithName:(id)arg1;

@end

@interface ByteAudioOutputStream : NSObject
{
    struct IByteAudioEngine *cppEngineInstance_;
    struct ByteAudioOutputStream *cppStreamInstance_;
    struct ByteAudioOutputSinkApple *streamSink_;
    id <ByteAudioOutputSinkDelegate> _delegate;
}

- (void).cxx_destruct;
@property(nonatomic) __weak id <ByteAudioOutputSinkDelegate> delegate; // @synthesize delegate=_delegate;
- (id)getReportStats;
- (void)setSinkDelegate:(id)arg1;
- (id)getValue:(long long)arg1;
- (int)setValue:(long long)arg1 Value:(id)arg2;
- (int)setStreamFormat:(id)arg1;
- (int)setMute:(_Bool)arg1;
- (void)setGain:(long long)arg1 fadeInterval:(long long)arg2;
- (void)setGain:(long long)arg1;
- (int)stopStream;
- (int)startStream;
- (unsigned int)getId;
- (id)getName;
- (void)releaseStream;
- (id)initWithName:(id)arg1;

@end

@interface ByteAudioAuxStream : NSObject
{
    struct IByteAudioEngine *cppEngineInstance_;
    struct ByteAudioAuxStream *cppStreamInstance_;
    struct ByteAudioAuxSinkApple *streamSink_;
    id <ByteAudioAuxSinkDelegate> _delegate;
}

- (void).cxx_destruct;
@property(nonatomic) __weak id <ByteAudioAuxSinkDelegate> delegate; // @synthesize delegate=_delegate;
- (int)pushAudioFrame:(id)arg1;
- (void)clearInputStreamNameForMix;
- (id)getReportStats;
- (void)addInputStreamNameForMix:(id)arg1;
- (void)setAudioSourceFile:(id)arg1;
- (void)setSinkDelegate:(id)arg1;
- (id)getValue:(long long)arg1;
- (int)setValue:(long long)arg1 Value:(id)arg2;
- (int)setStreamFormat:(id)arg1;
- (void)setGain:(long long)arg1;
- (int)resumeStream;
- (int)pauseStream;
- (int)stopStream;
- (int)startStream;
- (unsigned int)getId;
- (id)getName;
- (void)releaseStream;
- (id)initWithName:(id)arg1;

@end

@interface RTCAudioSession : NSObject <RTCAudioSessionActivationDelegate>
{
    struct CriticalSection _crit;
    struct CriticalSection _session_crit;
    AVAudioSession *_session;
    NSObject<OS_dispatch_queue> *_session_notify_queue;
    int _activationCount;
    int _lockRecursionCount;
    int _webRTCSessionCount;
    _Bool _isActive;
    _Bool _isInterrupted;
    _Bool _isOnlyInitPlayout;
    _Bool _isRecordConfigured;
    _Bool _isPlayoutConfigured;
    _Bool _isRecordInited;
    _Bool _isPlayoutInited;
    _Bool _isEnableSpeakerOn;
    _Bool _highQuality;
    _Bool _enableDeactive;
    _Bool _useExternalCategoryOnlyPlay;
    _Bool _isAttach;
    _Bool _isScreenCaptured;
    vector_03b67401 _delegates;
}

+ (id)sharedInstance;
- (id).cxx_construct;
- (void).cxx_destruct;
@property(nonatomic) _Bool isScreenCaptured; // @synthesize isScreenCaptured=_isScreenCaptured;
@property(readonly, nonatomic) int webRTCSessionCount; // @synthesize webRTCSessionCount=_webRTCSessionCount;
@property(readonly, nonatomic) AVAudioSession *session; // @synthesize session=_session;
- (void)notifyFailedToSetActive:(_Bool)arg1 error:(id)arg2;
- (void)notifyDidSetActive:(_Bool)arg1;
- (void)notifyWillSetActive:(_Bool)arg1;
- (void)notifyDidDetectPlayoutGlitch:(long long)arg1;
- (void)notifyDidChangeOutputVolume:(float)arg1;
- (void)notifyDidStopPlayOrRecord;
- (void)notifyDidStartPlayOrRecord;
- (void)notifyScreenCapturedDidChanged:(_Bool)arg1;
- (void)notifyMediaServicesWereReset;
- (void)notifyMediaServicesWereLost;
- (void)notifyDidChangeRouteWithReason:(unsigned long long)arg1 previousRoute:(id)arg2;
- (void)notifyDidEndInterruptionWithShouldResumeSession:(_Bool)arg1;
- (void)notifyDidBeginInterruption;
- (void)audioSessionDidDeactivate:(id)arg1;
- (void)audioSessionDidActivate:(id)arg1;
- (void)updateAudioSessionAfterEvent;
- (void)setEnableSpeakerOn:(_Bool)arg1;
- (id)configurationErrorWithDescription:(id)arg1;
- (void)setSplitADMStateTerminate:(_Bool)arg1;
- (void)setSplitADMStateInit:(_Bool)arg1;
- (_Bool)unconfigureWebRTCSessionNew:(_Bool)arg1 error:(id *)arg2;
- (_Bool)configureWebRTCSessionNew:(_Bool)arg1 useHighQualityAudio:(_Bool)arg2 enableDeactive:(_Bool)arg3 useExternalCategoryOnlyPlay:(_Bool)arg4 error:(id *)arg5;
- (_Bool)configureSessionInternal:(id *)arg1;
- (_Bool)unconfigureWebRTCSession:(id *)arg1;
- (_Bool)configureWebRTCSession:(_Bool)arg1 useHighQualityAudio:(_Bool)arg2 enableDeactive:(_Bool)arg3 useExternalCategoryOnlyPlay:(_Bool)arg4 error:(id *)arg5;
- (_Bool)endWebRTCSession:(id *)arg1;
- (_Bool)beginWebRTCSession:(id *)arg1;
- (_Bool)checkLock:(id *)arg1;
- (void)setIsOnlyInitPlayout:(_Bool)arg1;
- (_Bool)isOnlyInitPlayout;
- (void)setIsEnableSpeakerOn:(_Bool)arg1;
- (_Bool)isEnableSpeakerOn;
@property(nonatomic) _Bool isInterrupted;
@property(readonly) _Bool canPlayOrRecord;
- (long long)decrementActivationCount;
- (int)incrementActivationCount;
@property(readonly, nonatomic) int activationCount;
- (void)removeZeroedDelegates;
- (void)pushDelegate:(id)arg1;
@property(readonly, nonatomic) vector_03b67401 delegates; // @synthesize delegates=_delegates;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)handleApplicationScreenCapturedDidChanged:(id)arg1;
- (void)handleApplicationDidBecomeActive:(id)arg1;
- (void)handleSilenceSecondaryAudioHintNotification:(id)arg1;
- (void)handleMediaServicesWereReset:(id)arg1;
- (void)handleMediaServicesWereLost:(id)arg1;
- (void)handleRouteChangeNotification:(id)arg1;
- (void)handleInterruptionNotification:(id)arg1;
- (_Bool)setPreferredDataSource:(id)arg1 preferredDataSource:(id)arg2 error:(id *)arg3;
- (_Bool)setPreferredInput:(id)arg1 error:(id *)arg2;
- (_Bool)overrideOutputAudioPort:(unsigned long long)arg1 error:(id *)arg2;
- (_Bool)setPreferredOutputNumberOfChannels:(long long)arg1 error:(id *)arg2;
- (_Bool)setPreferredInputNumberOfChannels:(long long)arg1 error:(id *)arg2;
- (_Bool)setPreferredIOBufferDuration:(double)arg1 error:(id *)arg2;
- (_Bool)setPreferredSampleRate:(double)arg1 error:(id *)arg2;
- (_Bool)setInputGain:(float)arg1 error:(id *)arg2;
- (_Bool)setMode:(id)arg1 error:(id *)arg2;
- (_Bool)setCategory:(id)arg1 withOptions:(unsigned long long)arg2 error:(id *)arg3;
- (_Bool)setActive:(_Bool)arg1 error:(id *)arg2;
@property(readonly) double outputLatency;
@property(readonly) double inputLatency;
@property(readonly) double preferredIOBufferDuration;
@property(readonly) double IOBufferDuration;
@property(readonly) float outputVolume;
@property(readonly) long long outputNumberOfChannels;
@property(readonly) long long inputNumberOfChannels;
@property(readonly) double preferredSampleRate;
@property(readonly) double sampleRate;
- (_Bool)inputAvailable;
@property(readonly) _Bool inputGainSettable;
@property(readonly) float inputGain;
@property(readonly) AVAudioSessionRouteDescription *currentRoute;
@property(readonly) NSString *mode;
@property(readonly) unsigned long long categoryOptions;
@property(readonly) NSString *category;
- (void)unlockForConfiguration;
- (void)lockForConfiguration;
- (void)removeDelegate:(id)arg1;
- (void)addDelegate:(id)arg1;
@property(readonly, nonatomic) _Bool isLocked;
@property(readonly, nonatomic) _Bool isActive;
- (void)setIsActive:(_Bool)arg1;
- (void)detachRTCAudioSession;
- (void)attachRTCAudioSession;
- (void)dealloc;
- (id)initWithAudioSession:(id)arg1;
- (id)init;
- (_Bool)setConfiguration:(id)arg1 active:(_Bool)arg2 shouldSetActive:(_Bool)arg3 error:(id *)arg4;
- (_Bool)setConfiguration:(id)arg1 active:(_Bool)arg2 error:(id *)arg3;
- (_Bool)setConfiguration:(id)arg1 error:(id *)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface RTCAudioSessionConfiguration : NSObject
{
    NSString *_category;
    unsigned long long _categoryOptions;
    NSString *_mode;
    double _sampleRate;
    double _ioBufferDuration;
    long long _inputNumberOfChannels;
    long long _outputNumberOfChannels;
    double _inputLatency;
    double _outputLatency;
}

+ (_Bool)getConfigurationState;
+ (void)setConfigurationState:(_Bool)arg1;
+ (_Bool)isSeparateSessionEnable;
+ (void)setExternalWebRTCConfiguration:(id)arg1;
+ (id)externalWebRTCConfiguration;
+ (void)setWebRTCConfiguration:(id)arg1;
+ (id)webRTCConfiguration;
+ (id)currentConfiguration;
+ (void)initialize;
- (void).cxx_destruct;
@property(nonatomic) double outputLatency; // @synthesize outputLatency=_outputLatency;
@property(nonatomic) double inputLatency; // @synthesize inputLatency=_inputLatency;
@property(nonatomic) long long outputNumberOfChannels; // @synthesize outputNumberOfChannels=_outputNumberOfChannels;
@property(nonatomic) long long inputNumberOfChannels; // @synthesize inputNumberOfChannels=_inputNumberOfChannels;
@property(nonatomic) double ioBufferDuration; // @synthesize ioBufferDuration=_ioBufferDuration;
@property(nonatomic) double sampleRate; // @synthesize sampleRate=_sampleRate;
@property(retain, nonatomic) NSString *mode; // @synthesize mode=_mode;
@property(nonatomic) unsigned long long categoryOptions; // @synthesize categoryOptions=_categoryOptions;
@property(retain, nonatomic) NSString *category; // @synthesize category=_category;
- (id)toString;
- (_Bool)isIPhone4S;
- (id)init;

@end

@interface RTCNativeAudioSessionDelegateAdapter : NSObject <RTCAudioSessionDelegate>
{
    struct AudioSessionObserver *_observer;
}

- (void)audioSession:(id)arg1 didChangeOutputVolume:(float)arg2;
- (void)audioSessionDidStopPlayOrRecord:(id)arg1;
- (void)audioSessionDidStartPlayOrRecord:(id)arg1;
- (void)audioSessionMediaServerReset:(id)arg1;
- (void)audioSessionMediaServerTerminated:(id)arg1;
- (void)audioSessionDidChangeRoute:(id)arg1 reason:(unsigned long long)arg2 previousRoute:(id)arg3;
- (void)audioSessionDidEndInterruption:(id)arg1 shouldResumeSession:(_Bool)arg2;
- (void)audioSessionDidBeginInterruption:(id)arg1;
- (id)initWithObserver:(struct AudioSessionObserver *)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AudioFileApple : NSObject
{
    struct OpaqueAudioFileID *_audioFileID;
    struct AudioBufferList *_outputBuffer;
    struct OpaqueAudioConverter *_convert;
    unsigned int _readPacket;
    char *_encodedBuffer;
    unsigned int _maxPacketSize;
    struct AudioStreamBasicDescription _outFormat;
    unsigned int _trackCount;
    unsigned int _duration;
    struct AudioStreamBasicDescription _audioFormat;
    unsigned int _usedTrack;
    unsigned int _readFrameOnce;
}

- (unsigned int)getDuration;
- (long long)getCurrentPosition;
- (void)seek:(unsigned long long)arg1;
- (void)closeFile;
- (_Bool)readAudioData:(void **)arg1 readFrameNumber:(unsigned int *)arg2;
- (_Bool)initWithFilePath:(id)arg1 withStreamDescription:(struct AudioStreamBasicDescription *)arg2 useTrack:(int)arg3;

@end

@interface ByteRtciOSAudioRouteCpp : NSObject <ByteRtciOSAudioSessionNotifyDelegate>
{
    struct iOSAudioRouter *_iOSAudioRouter;
    ByteRtciOSAudioRoute *_byteRtciOSAudioRoute;
    NSLock *_routeLock;
    AVAudioSessionRouteDescription *_current_route_;
    AVAudioSessionPortDescription *_current_output_port_description_;
    AVAudioSessionPortDescription *_current_input_port_description_;
}

- (void).cxx_destruct;
@property(retain) AVAudioSessionPortDescription *current_input_port_description_; // @synthesize current_input_port_description_=_current_input_port_description_;
@property(retain) AVAudioSessionPortDescription *current_output_port_description_; // @synthesize current_output_port_description_=_current_output_port_description_;
@property(retain) AVAudioSessionRouteDescription *current_route_; // @synthesize current_route_=_current_route_;
@property(retain, nonatomic) NSLock *routeLock; // @synthesize routeLock=_routeLock;
@property(retain, nonatomic) ByteRtciOSAudioRoute *byteRtciOSAudioRoute; // @synthesize byteRtciOSAudioRoute=_byteRtciOSAudioRoute;
- (id)getRenderDeviceName;
- (id)getCaptureDeviceName;
- (id)getSessionInfo;
- (id)makeSessionPortDescString:(id)arg1;
- (id)makeSessionSourceDescString:(id)arg1;
- (long long)convertPortTypeToByteAudioRouting:(id)arg1;
- (int)getCurrentRouting;
- (void)didOutputVolumeChanged:(float)arg1;
- (void)didScreenCaptureStateChanged:(_Bool)arg1;
- (void)enableSpeaker:(_Bool)arg1;
- (void)enableAudioRoute:(_Bool)arg1;
- (void)didAudioMediaServerChanged:(_Bool)arg1;
- (void)didAudioInterruptionChanged:(_Bool)arg1;
- (void)didAudioRouteChanged:(long long)arg1 reason:(int)arg2;
- (void)releaseIRtcEnginehandle;
- (void)dealloc;
- (id)initWithIRtcEngine:(struct iOSAudioRouter *)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ByteRtciOSAudioRoute : NSObject <RTCAudioSessionDelegate>
{
    _Bool _enableAudioRoute;
    _Bool _isAttach;
    id <ByteRtciOSAudioSessionNotifyDelegate> _audioSessionNotifyDelegate;
}

- (void).cxx_destruct;
@property(nonatomic) _Bool isAttach; // @synthesize isAttach=_isAttach;
@property(nonatomic) __weak id <ByteRtciOSAudioSessionNotifyDelegate> audioSessionNotifyDelegate; // @synthesize audioSessionNotifyDelegate=_audioSessionNotifyDelegate;
@property(nonatomic) _Bool enableAudioRoute; // @synthesize enableAudioRoute=_enableAudioRoute;
- (void)audioSession:(id)arg1 failedToSetActive:(_Bool)arg2 error:(id)arg3;
- (void)audioSession:(id)arg1 didSetActive:(_Bool)arg2;
- (void)audioSession:(id)arg1 willSetActive:(_Bool)arg2;
- (void)audioSession:(id)arg1 didDetectPlayoutGlitch:(long long)arg2;
- (void)audioSession:(id)arg1 didChangeOutputVolume:(float)arg2;
- (void)audioSessionDidStopPlayOrRecord:(id)arg1;
- (void)audioSessionDidStartPlayOrRecord:(id)arg1;
- (void)audioSession:(id)arg1 screenCaptureStateChanged:(_Bool)arg2;
- (void)audioSessionMediaServerReset:(id)arg1;
- (void)audioSessionMediaServerTerminated:(id)arg1;
- (void)audioSessionDidChangeRoute:(id)arg1 reason:(unsigned long long)arg2 previousRoute:(id)arg3;
- (void)audioSessionDidEndInterruption:(id)arg1 shouldResumeSession:(_Bool)arg2;
- (void)audioSessionDidBeginInterruption:(id)arg1;
- (void)notifyCurrentAudioRouteWithReason:(int)arg1 previousRoute:(id)arg2;
- (long long)convertPortTypeToByteAudioRouting:(id)arg1;
- (void)notifyAudioRouteChanged:(long long)arg1 reason:(int)arg2;
- (void)enableAudioRoute:(_Bool)arg1;
- (void)setEnableSpeaker:(_Bool)arg1;
- (_Bool)detachAudioSession;
- (_Bool)attachAudioSession;
- (void)dealloc;
- (id)initWithAudioRouteDelegate:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface RTCDispatcher : NSObject
{
}

+ (id)dispatchQueueForType:(long long)arg1;
+ (_Bool)isOnQueueForType:(long long)arg1;
+ (void)dispatchAsyncOnType:(long long)arg1 block:(CDUnknownBlockType)arg2;
+ (void)initialize;

@end

@interface RTCNetworkMonitor : NSObject
{
    struct NetworkMonitorObserver *_observer;
    NSObject<OS_nw_path_monitor> *_pathMonitor;
    NSObject<OS_dispatch_queue> *_monitorQueue;
}

- (void).cxx_destruct;
- (void)dealloc;
- (id)initWithObserver:(struct NetworkMonitorObserver *)arg1;

@end

