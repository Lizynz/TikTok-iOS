//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 25 2017 03:49:04).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AudioDeviceEventHandlerImpl {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct Bucket;

struct ByteEAGLViewDelegate {
    CDUnknownFunctionPointerType *_field1;
    struct shared_ptr<bytertc::basic::rw_lock_t<>> _field2;
    struct shared_ptr<bool> _field3;
    struct ByteEAGLViewDelegate *_field4;
};

struct ByteRtcASREventHandler {
    CDUnknownFunctionPointerType *_vptr$IRTCASREngineEventHandler;
    id handler_;
};

struct ByteRtcAudioFrameObserverOCC {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct ByteRtcAudioProcessorOCC {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct ByteRtcEngineEncryptHandler {
    CDUnknownFunctionPointerType *_vptr$IEncryptHandler;
    struct mutex hlock_;
    id handler_;
};

struct ByteRtcEngineEventHandler {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    id _field3;
    id _field4;
};

struct ByteRtcInternalEventHandler {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct ByteRtcMediaMetaDataObserverOCC {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct ByteRtcRoomEventHandler {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    id _field3;
};

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double width;
    double height;
};

struct CriticalSection {
    struct _opaque_pthread_mutex_t _field1;
    struct _opaque_pthread_t *_field2;
    int _field3;
};

struct ExternalVideoEncoderEventHandlerObjC {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct I420BufferInterface;

struct IAudioDeviceManagerEx {
    CDUnknownFunctionPointerType *_field1;
};

struct IAudioMixingManager {
    CDUnknownFunctionPointerType *_field1;
};

struct IPositionAudioRenderInterface {
    CDUnknownFunctionPointerType *_field1;
};

struct IRtcEngine {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
};

struct IRtcRoom {
    CDUnknownFunctionPointerType *_field1;
};

struct ITranscoderObserver {
    CDUnknownFunctionPointerType *_field1;
};

struct Instanced {
    long long instance_id_;
};

struct LiveTranscodingAudioConfig {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
};

struct LiveTranscodingConfig {
    char *_field1;
    struct LiveTranscodingVideoConfig _field2;
    struct LiveTranscodingAudioConfig _field3;
    struct LiveTranscodingLayout _field4;
    char *_field5;
};

struct LiveTranscodingLayout {
    char *_field1;
    char *_field2;
    struct LiveTranscodingRegion *_field3;
    int _field4;
};

struct LiveTranscodingRegion;

struct LiveTranscodingVideoConfig {
    int _field1;
    int _field2;
    int _field3;
    _Bool _field4;
    int _field5;
    int _field6;
    int _field7;
};

struct LocalEncodedVideoFrameObserverObjC {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct NSNotificationCallbacks {
    CDUnknownFunctionPointerType *_field1;
};

struct NetworkMonitorObserver {
    CDUnknownFunctionPointerType *_field1;
};

struct ObjCVideoTrackSource {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    CDUnknownFunctionPointerType *_field3;
    struct list<webrtc::ObserverInterface *, std::__1::allocator<webrtc::ObserverInterface *>> _field4;
    struct ThreadChecker _field5;
    struct VideoAdapter _field6;
    struct CriticalSection _field7;
    struct optional<webrtc::VideoTrackSourceInterface::Stats> _field8;
    struct RateStatistics _field9;
    long long _field10;
    unsigned long long _field11;
    unsigned long long _field12;
    unsigned int _field13;
    struct VideoBroadcaster _field14;
    struct VideoTrackSourceObserver *_field15;
    struct shared_ptr<realx::RXHWDeviceContext> _field16;
    struct VideoBroadcaster _field17;
    struct TimestampAligner _field18;
    id _field19;
};

struct RXHWDeviceContext;

struct RXVideoCaptureCapability {
    int width;
    int height;
    int max_fps;
    int cam_id;
    int capture_buffer_type;
    unsigned int format;
    _Bool interlaced;
    unsigned int rotate;
    void *context;
};

struct RXVideoCaptureEventObserver {
    CDUnknownFunctionPointerType *_field1;
};

struct RXVideoSourceCallback {
    CDUnknownFunctionPointerType *_field1;
};

struct RateStatistics {
    struct deque<webrtc::RateStatistics::Bucket, std::__1::allocator<webrtc::RateStatistics::Bucket>> _field1;
    long long _field2;
    long long _field3;
    _Bool _field4;
    int _field5;
    float _field6;
    long long _field7;
    long long _field8;
};

struct RemoteEncodedVideoFrameObserverObjC {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct SinkPair;

struct Stats {
    int _field1;
    int _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
};

struct ThreadChecker;

struct TimestampAligner {
    int _field1;
    long long _field2;
    long long _field3;
    long long _field4;
};

struct VideoAdapter {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
    struct optional<long long> _field9;
    struct optional<std::__1::pair<int, int>> _field10;
    struct optional<int> _field11;
    struct optional<std::__1::pair<int, int>> _field12;
    struct optional<int> _field13;
    struct optional<int> _field14;
    int _field15;
    int _field16;
    int _field17;
    unsigned int _field18;
    struct CriticalSection _field19;
};

struct VideoBroadcaster {
    CDUnknownFunctionPointerType *_field1;
    struct vector<rtc::VideoSourceBase::SinkPair, std::__1::allocator<rtc::VideoSourceBase::SinkPair>> _field2;
    CDUnknownFunctionPointerType *_field3;
    struct CriticalSection _field4;
    struct VideoSinkWants _field5;
    struct scoped_refptr<webrtc::VideoFrameBuffer> _field6;
    unsigned int _field7;
};

struct VideoFrameBuffer;

struct VideoFrameObserverObjC {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct map<std::__1::basic_string<char>, std::__1::shared_ptr<bytertc::VideoFrameConverterObjC>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<bytertc::VideoFrameConverterObjC>>>> _field3;
};

struct VideoProcessorObjC;

struct VideoSinkWants {
    _Bool _field1;
    _Bool _field2;
    int _field3;
    struct optional<int> _field4;
    int _field5;
};

struct VideoTrackSourceObserver;

struct WeakPtr<bytertc::ByteEAGLViewDelegate> {
    struct shared_ptr<bytertc::basic::rw_lock_t<>> lock_;
    struct shared_ptr<bool> flag_;
    struct ByteEAGLViewDelegate *raw_ptr_;
};

struct __list_node_base<webrtc::ObserverInterface *, void *> {
    struct __list_node_base<webrtc::ObserverInterface *, void *> *_field1;
    struct __list_node_base<webrtc::ObserverInterface *, void *> *_field2;
};

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *_field1;
};

struct _opaque_pthread_mutex_t {
    long long __sig;
    char __opaque[56];
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *_field1;
                    unsigned long long _field2;
                    unsigned long long _field3;
                } _field1;
                struct __short {
                    char _field1[23];
                    struct {
                        unsigned char _field1;
                    } _field2;
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
};

struct deque<webrtc::RateStatistics::Bucket, std::__1::allocator<webrtc::RateStatistics::Bucket>> {
    struct __split_buffer<webrtc::RateStatistics::Bucket *, std::__1::allocator<webrtc::RateStatistics::Bucket *>> {
        struct Bucket **_field1;
        struct Bucket **_field2;
        struct Bucket **_field3;
        struct __compressed_pair<webrtc::RateStatistics::Bucket **, std::__1::allocator<webrtc::RateStatistics::Bucket *>> {
            struct Bucket **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<webrtc::RateStatistics::Bucket>> {
        unsigned long long _field1;
    } _field3;
};

struct dummy_type {
    struct empty_struct data[8];
};

struct empty_struct;

struct function<void (bytertc::NetworkType)> {
    struct __value_func<void (bytertc::NetworkType)> {
        struct type __buf_;
        struct __base<void (bytertc::NetworkType)> *__f_;
    } __f_;
};

struct in_addr {
    unsigned int _field1;
};

struct list<webrtc::ObserverInterface *, std::__1::allocator<webrtc::ObserverInterface *>> {
    struct __list_node_base<webrtc::ObserverInterface *, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<webrtc::ObserverInterface *, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct map<std::__1::basic_string<char>, std::__1::shared_ptr<bytertc::VideoFrameConverterObjC>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<bytertc::VideoFrameConverterObjC>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<bytertc::VideoFrameConverterObjC>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<bytertc::VideoFrameConverterObjC>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<bytertc::VideoFrameConverterObjC>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<bytertc::VideoFrameConverterObjC>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<bytertc::VideoFrameConverterObjC>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct mutex {
    struct _opaque_pthread_mutex_t __m_;
};

struct optional<RTCVideoRotation> {
    _Bool engaged_;
    CDUnion_019de37f ;
};

struct optional<int> {
    _Bool _field1;
    union {
        struct dummy_type _field1;
        int _field2;
    } _field2;
};

struct optional<long long> {
    _Bool _field1;
    CDUnion_019de37f _field2;
};

struct optional<std::__1::pair<int, int>> {
    _Bool _field1;
    union {
        struct dummy_type _field1;
        struct pair<int, int> _field2;
    } _field2;
};

struct optional<webrtc::VideoTrackSourceInterface::Stats> {
    _Bool _field1;
    union {
        struct dummy_type _field1;
        struct Stats _field2;
    } _field2;
};

struct pair<int, int> {
    int _field1;
    int _field2;
};

struct recursive_mutex {
    struct _opaque_pthread_mutex_t __m_;
};

struct rw_lock_t<std::__1::mutex>;

struct scoped_refptr<webrtc::I420BufferInterface> {
    struct I420BufferInterface *ptr_;
};

struct scoped_refptr<webrtc::VideoFrameBuffer> {
    struct VideoFrameBuffer *_field1;
};

struct shared_ptr<bool> {
    _Bool *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<bytertc::basic::rw_lock_t<>> {
    struct rw_lock_t<std::__1::mutex> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<realx::RXHWDeviceContext> {
    struct RXHWDeviceContext *_field1;
    struct __shared_weak_count *_field2;
};

struct sockaddr_in {
    unsigned char _field1;
    unsigned char _field2;
    unsigned short _field3;
    struct in_addr _field4;
    char _field5[8];
};

struct type {
    unsigned char __lx[24];
};

struct unique_ptr<bytertc::VideoProcessorObjC, std::__1::default_delete<bytertc::VideoProcessorObjC>> {
    struct __compressed_pair<bytertc::VideoProcessorObjC *, std::__1::default_delete<bytertc::VideoProcessorObjC>> {
        struct VideoProcessorObjC *__value_;
    } __ptr_;
};

struct vector<rtc::VideoSourceBase::SinkPair, std::__1::allocator<rtc::VideoSourceBase::SinkPair>> {
    struct SinkPair *_field1;
    struct SinkPair *_field2;
    struct __compressed_pair<rtc::VideoSourceBase::SinkPair *, std::__1::allocator<rtc::VideoSourceBase::SinkPair>> {
        struct SinkPair *_field1;
    } _field3;
};

struct vector<unsigned char, std::__1::allocator<unsigned char>> {
    char *__begin_;
    char *__end_;
    struct __compressed_pair<unsigned char *, std::__1::allocator<unsigned char>> {
        char *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    long long value;
    int timescale;
    unsigned int flags;
    long long epoch;
} CDStruct_1b6d18a9;

// Template types
typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *_field1;
                    unsigned long long _field2;
                    unsigned long long _field3;
                } _field1;
                struct __short {
                    char _field1[23];
                    struct {
                        unsigned char _field1;
                    } _field2;
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
} basic_string_f3204e2a;

typedef struct function<void (bytertc::NetworkType)> {
    struct __value_func<void (bytertc::NetworkType)> {
        struct type __buf_;
        struct __base<void (bytertc::NetworkType)> *__f_;
    } __f_;
} function_eaa74433;

typedef struct scoped_refptr<webrtc::I420BufferInterface> {
    struct I420BufferInterface *ptr_;
} scoped_refptr_b674d2a6;

#pragma mark Typedef'd Unions

typedef union {
    struct dummy_type dummy_;
    long long data_;
} CDUnion_019de37f;

#pragma mark -

//
// File: /Users/lizynz/Desktop/Payload/TikTok.app/Frameworks/VolcEngineRTC.framework/VolcEngineRTC
// UUID: C835236D-CF32-3318-8B69-3C6393E60215
//
//                           Arch: arm64
//                Current version: 330.0.0
//          Compatibility version: 1.0.0
//                 Source version: 0.0.0.0.0
//            Minimum iOS version: 9.0.0
//                    SDK version: 14.5.0
//
// Objective-C Garbage Collection: Unsupported
//
//                       Run path: @executable_path/../Frameworks
//                               = /Users/lizynz/Desktop/Payload/TikTok.app/Frameworks/Frameworks
//                       Run path: @loader_path/Frameworks
//                               = /Users/lizynz/Desktop/Payload/TikTok.app/Frameworks/VolcEngineRTC.framework/Frameworks
//

@protocol AVCaptureVideoDataOutputSampleBufferDelegate <NSObject>

@optional
- (void)captureOutput:(AVCaptureOutput *)arg1 didDropSampleBuffer:(struct opaqueCMSampleBuffer *)arg2 fromConnection:(AVCaptureConnection *)arg3;
- (void)captureOutput:(AVCaptureOutput *)arg1 didOutputSampleBuffer:(struct opaqueCMSampleBuffer *)arg2 fromConnection:(AVCaptureConnection *)arg3;
@end

@protocol ByteRTCAudioFrameObserver <NSObject>
- (void)onMixedAudioFrame:(ByteRTCAudioFrame *)arg1;
- (void)onPlaybackAudioFrameBeforeMixing:(NSString *)arg1 audioFrame:(ByteRTCAudioFrame *)arg2;
- (void)onPlaybackAudioFrame:(ByteRTCAudioFrame *)arg1;
- (void)onRecordAudioFrame:(ByteRTCAudioFrame *)arg1;
@end

@protocol ByteRTCAudioProcessor <NSObject>
- (int)processAudioFrame:(ByteRTCAudioFrame *)arg1;
@end

@protocol ByteRTCEngineDelegate <NSObject>

@optional
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onForwardStreamEvent:(NSArray *)arg2;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onForwardStreamStateChanged:(NSArray *)arg2;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onRecordingProgressUpdate:(long long)arg2 process:(ByteRTCRecordingProgress *)arg3 recording_info:(ByteRTCRecordingInfo *)arg4;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onRecordingStateUpdate:(long long)arg2 state:(long long)arg3 error_code:(long long)arg4 recording_info:(ByteRTCRecordingInfo *)arg5;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onSocks5ProxyState:(long long)arg2 cmd:(NSString *)arg3 proxy_address:(NSString *)arg4 local_address:(NSString *)arg5 remote_address:(NSString *)arg6;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onHttpsProxyState:(long long)arg2;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onHttpProxyState:(long long)arg2;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 OnSimulcastSubscribeFallback:(ByteRTCRemoteStreamSwitchEvent *)arg2;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onPerformanceAlarmsWithMode:(long long)arg2 roomId:(NSString *)arg3 reason:(long long)arg4 sourceWantedData:(ByteRTCSourceWantedData *)arg5;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onLiveTranscodingResult:(NSString *)arg2 errorCode:(long long)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onAudioMixingStateChanged:(long long)arg2 state:(long long)arg3 error:(long long)arg4;
- (void)rtcEngineDidAudioEffectFinish:(ByteRTCEngineKit *)arg1 soundId:(long long)arg2;
- (void)rtcEngineLocalAudioMixingDidFinish:(ByteRTCEngineKit *)arg1;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 log:(NSDictionary *)arg2;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 didUnSubscribe:(NSString *)arg2 isReconnect:(_Bool)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 didSubscribe:(NSString *)arg2 isReconnect:(_Bool)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onNetworkDetectionStopped:(unsigned long long)arg2;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onNetworkDetectionResult:(unsigned long long)arg2 quality:(unsigned long long)arg3 rtt:(int)arg4 lostRate:(double)arg5 bitrate:(int)arg6 jitter:(int)arg7;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onServerMessageSendResult:(long long)arg2 error:(long long)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onUserMessageSendResultOutsideRoom:(long long)arg2 error:(long long)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onUserBinaryMessageReceivedOutsideRoom:(NSString *)arg2 message:(NSData *)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onUserMessageReceivedOutsideRoom:(NSString *)arg2 message:(NSString *)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onGetPeerOnlineStatus:(NSString *)arg2 status:(long long)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onServerParamsSetResult:(long long)arg2;
- (void)rtcEngineOnLogout:(ByteRTCEngineKit *)arg1;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onLoginResult:(NSString *)arg2 errorCode:(long long)arg3 elapsed:(long long)arg4;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onRoomMessageSendResult:(long long)arg2 error:(long long)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onUserMessageSendResult:(long long)arg2 error:(long long)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onUserBinaryMessageReceived:(NSString *)arg2 message:(NSData *)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onUserMessageReceived:(NSString *)arg2 message:(NSString *)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onRemoteVideoStateChanged:(ByteRTCRemoteStreamKey *)arg2 withVideoState:(long long)arg3 withVideoStateReason:(long long)arg4;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onLocalVideoStateChanged:(long long)arg2 withStreamState:(long long)arg3 withStreamError:(long long)arg4;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onRemoteAudioStateChanged:(ByteRTCRemoteStreamKey *)arg2 state:(long long)arg3 reason:(long long)arg4;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onLocalAudioStateChanged:(long long)arg2 error:(long long)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onRemoteStreamStats:(ByteRTCRemoteStreamStats *)arg2;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onLocalStreamStats:(ByteRTCLocalStreamStats *)arg2;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 reportSysStats:(ByteRTCSysStats *)arg2;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onRoomStats:(ByteRTCRoomStats *)arg2;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onStreamSyncInfoReceived:(ByteRTCRemoteStreamKey *)arg2 streamType:(long long)arg3 data:(NSData *)arg4;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onSEIMessageReceived:(ByteRTCRemoteStreamKey *)arg2 andMessage:(NSData *)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onRoomBinaryMessageReceived:(NSString *)arg2 message:(NSData *)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onRoomMessageReceived:(NSString *)arg2 message:(NSString *)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onAudioPlaybackDeviceChanged:(long long)arg2;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onAudioStreamBanned:(NSString *)arg2 isBanned:(_Bool)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onVideoStreamBanned:(NSString *)arg2 isBanned:(_Bool)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 didUserAudioRecvModeChange:(NSString *)arg2 mode:(unsigned long long)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 didUserAudioSendModeChange:(NSString *)arg2 mode:(unsigned long long)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 didStreamRemoved:(NSString *)arg2 stream:(id <ByteRTCStream>)arg3 reason:(long long)arg4;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onStreamSubscribed:(long long)arg2 userId:(NSString *)arg3 subscribeConfig:(ByteRTCSubscribeConfig *)arg4;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onStreamAdd:(id <ByteRTCStream>)arg2;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onFirstLocalAudioFrame:(long long)arg2;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onScreenVideoFramePlayStateChanged:(ByteRTCUser *)arg2 state:(unsigned long long)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onVideoFramePlayStateChanged:(ByteRTCUser *)arg2 state:(unsigned long long)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onAudioFramePlayStateChanged:(ByteRTCUser *)arg2 state:(unsigned long long)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onScreenVideoFrameSendStateChanged:(ByteRTCUser *)arg2 state:(unsigned long long)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onVideoFrameSendStateChanged:(ByteRTCUser *)arg2 state:(unsigned long long)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onAudioFrameSendStateChanged:(ByteRTCUser *)arg2 state:(unsigned long long)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onMediaDeviceStateChanged:(NSString *)arg2 device_type:(long long)arg3 device_state:(long long)arg4 device_error:(long long)arg5;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 remoteVideoStateChangedOfUid:(NSString *)arg2 state:(long long)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onLocalVideoSizeChanged:(long long)arg2 withFrameInfo:(ByteRTCVideoFrameInfo *)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onRemoteVideoSizeChanged:(ByteRTCRemoteStreamKey *)arg2 withFrameInfo:(ByteRTCVideoFrameInfo *)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onFirstRemoteVideoFrameRendered:(ByteRTCRemoteStreamKey *)arg2 withFrameInfo:(ByteRTCVideoFrameInfo *)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onFirstLocalVideoFrameCaptured:(long long)arg2 withFrameInfo:(ByteRTCVideoFrameInfo *)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onUserStopVideoCapture:(NSString *)arg2;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onUserStartVideoCapture:(NSString *)arg2;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onUserMuteVideo:(NSString *)arg2 withMuteState:(long long)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onRemoteAudioPropertiesReport:(NSArray *)arg2 totalRemoteVolume:(long long)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onLocalAudioPropertiesReport:(NSArray *)arg2;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onAudioVolumeIndication:(NSArray *)arg2 totalRemoteVolume:(long long)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onFirstRemoteAudioFrame:(ByteRTCRemoteStreamKey *)arg2;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onUserStopAudioCapture:(NSString *)arg2;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onUserStartAudioCapture:(NSString *)arg2;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 didLocalAudioEnabled:(_Bool)arg2 byUid:(NSString *)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onUserMuteAudio:(NSString *)arg2 muteState:(long long)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onMuteAllRemoteVideo:(NSString *)arg2 withMuteState:(long long)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onMuteAllRemoteAudio:(NSString *)arg2 muteState:(long long)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onStreamPublishSuccess:(NSString *)arg2 isScreen:(_Bool)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onUserLeave:(NSString *)arg2 reason:(unsigned long long)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onUserJoined:(ByteRTCUserInfo *)arg2 elapsed:(long long)arg3;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onLeaveRoomWithStats:(ByteRTCRoomStats *)arg2;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onJoinRoomResult:(NSString *)arg2 withUid:(NSString *)arg3 errorCode:(long long)arg4 joinType:(long long)arg5 elapsed:(long long)arg6;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 networkTypeChangedToType:(long long)arg2;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 connectionChangedToState:(long long)arg2;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onError:(long long)arg2;
- (void)rtcEngine:(ByteRTCEngineKit *)arg1 onWarning:(long long)arg2;
@end

@protocol ByteRTCMediaMetadataObserver <NSObject>
- (NSData *)videoFrameMediaMetaDataAtTime:(double)arg1;

@optional
- (void)receiveVideoFrameFromUID:(NSString *)arg1 withExtendedData:(NSData *)arg2 atTimestamp:(double)arg3;
@end

@protocol ByteRTCMonitorDelegate <NSObject>

@optional
- (void)onVerboseLogWithLevel:(unsigned long long)arg1 filename:(NSString *)arg2 tag:(NSString *)arg3 line:(int)arg4 functionName:(NSString *)arg5 format:(NSString *)arg6;
- (_Bool)isConsole;
- (void)onMonitorLog:(NSDictionary *)arg1 withType:(NSString *)arg2;
@end

@protocol ByteRTCRoomDelegate <NSObject>

@optional
- (void)rtcRoom:(ByteRTCRoom *)arg1 onForwardStreamEvent:(NSArray *)arg2;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onForwardStreamStateChanged:(NSArray *)arg2;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onAudioStreamBanned:(NSString *)arg2 isBanned:(_Bool)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onVideoStreamBanned:(NSString *)arg2 isBanned:(_Bool)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onScreenVideoFramePlayStateChanged:(ByteRTCUser *)arg2 state:(unsigned long long)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onVideoFramePlayStateChanged:(ByteRTCUser *)arg2 state:(unsigned long long)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onAudioFramePlayStateChanged:(ByteRTCUser *)arg2 state:(unsigned long long)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onScreenVideoFrameSendStateChanged:(ByteRTCUser *)arg2 state:(unsigned long long)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onVideoFrameSendStateChanged:(ByteRTCUser *)arg2 state:(unsigned long long)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onAudioFrameSendStateChanged:(ByteRTCUser *)arg2 state:(unsigned long long)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onRemoteVideoStateChanged:(ByteRTCRemoteStreamKey *)arg2 withVideoState:(long long)arg3 withVideoStateReason:(long long)arg4;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onLocalVideoStateChanged:(long long)arg2 withStreamState:(long long)arg3 withStreamError:(long long)arg4;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onRemoteAudioStateChanged:(ByteRTCRemoteStreamKey *)arg2 state:(long long)arg3 reason:(long long)arg4;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onLocalAudioStateChanged:(long long)arg2 error:(long long)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onUserStopVideoCapture:(NSString *)arg2;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onUserStartVideoCapture:(NSString *)arg2;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onUserMuteVideo:(NSString *)arg2 withMuteState:(long long)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onFirstRemoteVideoFrameRendered:(ByteRTCRemoteStreamKey *)arg2 withFrameInfo:(ByteRTCVideoFrameInfo *)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onRemoteVideoSizeChanged:(ByteRTCRemoteStreamKey *)arg2 withFrameInfo:(ByteRTCVideoFrameInfo *)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onLocalVideoSizeChanged:(long long)arg2 withFrameInfo:(ByteRTCVideoFrameInfo *)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onFirstLocalVideoFrameCaptured:(long long)arg2 withFrameInfo:(ByteRTCVideoFrameInfo *)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onLiveTranscodingResult:(NSString *)arg2 errorCode:(long long)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onRoomMessageSendResult:(long long)arg2 error:(long long)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onUserMessageSendResult:(long long)arg2 error:(long long)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onUserBinaryMessageReceived:(NSString *)arg2 message:(NSData *)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onUserMessageReceived:(NSString *)arg2 message:(NSString *)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onRoomBinaryMessageReceived:(NSString *)arg2 message:(NSData *)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onRoomMessageReceived:(NSString *)arg2 message:(NSString *)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onStreamPublishSuccess:(NSString *)arg2 isScreen:(_Bool)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onStreamSubscribed:(long long)arg2 userId:(NSString *)arg3 subscribeConfig:(ByteRTCSubscribeConfig *)arg4;
- (void)rtcRoom:(ByteRTCRoom *)arg1 didStreamRemoved:(NSString *)arg2 stream:(id <ByteRTCStream>)arg3 reason:(long long)arg4;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onStreamAdd:(id <ByteRTCStream>)arg2;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onFirstRemoteAudioFrame:(ByteRTCRemoteStreamKey *)arg2;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onFirstLocalAudioFrame:(long long)arg2;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onUserStopAudioCapture:(NSString *)arg2;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onUserStartAudioCapture:(NSString *)arg2;
- (void)rtcRoom:(ByteRTCRoom *)arg1 didLocalAudioEnabled:(_Bool)arg2 byUid:(NSString *)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onUserMuteAudio:(NSString *)arg2 muteState:(long long)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onMuteAllRemoteVideo:(NSString *)arg2 withMuteState:(long long)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onMuteAllRemoteAudio:(NSString *)arg2 muteState:(long long)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onUserLeave:(NSString *)arg2 reason:(unsigned long long)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onUserJoined:(ByteRTCUserInfo *)arg2 elapsed:(long long)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onRemoteStreamStats:(ByteRTCRemoteStreamStats *)arg2;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onLocalStreamStats:(ByteRTCLocalStreamStats *)arg2;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onRoomStats:(ByteRTCRoomStats *)arg2;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onAudioVolumeIndication:(NSArray *)arg2 totalRemoteVolume:(long long)arg3;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onRoomError:(long long)arg2;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onRoomWarning:(long long)arg2;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onLeaveRoomWithStats:(ByteRTCRoomStats *)arg2;
- (void)rtcRoom:(ByteRTCRoom *)arg1 onJoinRoomResult:(NSString *)arg2 withUid:(NSString *)arg3 errorCode:(long long)arg4 joinType:(long long)arg5 elapsed:(long long)arg6;
@end

@protocol ByteRTCScreenSharable <NSObject>
- (void)onScreenCaptureExtensionQuit;
- (int)onScreenCaptureExtensionStartup;
@end

@protocol ByteRTCStream <NSObject>
@property(readonly, copy, nonatomic) NSArray *videoStreamDescriptions;
@property(readonly, nonatomic) _Bool hasAudio;
@property(readonly, nonatomic) _Bool hasVideo;
@property(readonly, nonatomic) _Bool isScreen;
@property(readonly, copy, nonatomic) NSString *userId;
@end

@protocol ByteRTCVideoSinkDelegate <NSObject>
- (int)getRenderElapse;
- (void)renderPixelBuffer:(struct __CVBuffer *)arg1 rotation:(long long)arg2 extendedData:(NSData *)arg3;
@end

@protocol GLKViewDelegate <NSObject>
- (void)glkView:(GLKView *)arg1 drawInRect:(struct CGRect)arg2;
@end

@protocol LiveTranscodingDelegate <NSObject>
- (void)onStreamMixingEvent:(unsigned long long)arg1 eventData:(NSString *)arg2 error:(long long)arg3 mixType:(unsigned long long)arg4;
- (_Bool)isSupportClientPushStream;

@optional
- (void)onMixingDataFrame:(ByteRTCFrameExtendedData *)arg1;
- (void)onMixingVideoFrame:(ByteRTCVideoFrame *)arg1;
- (void)onMixingAudioFrame:(ByteRTCAudioFrame *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol RTCI420Buffer <RTCYUVPlanarBuffer>
@end

@protocol RTCMutableI420Buffer <RTCI420Buffer, RTCMutableYUVPlanarBuffer>
@end

@protocol RTCMutableYUVPlanarBuffer <RTCYUVPlanarBuffer>
@property(readonly, nonatomic) char *mutableDataV;
@property(readonly, nonatomic) char *mutableDataU;
@property(readonly, nonatomic) char *mutableDataY;
@end

@protocol RTCVideoCapturerDelegate <NSObject>
- (void)capturer:(RTCVideoCapturer *)arg1 didCaptureVideoFrame:(RTCVideoFrame *)arg2;
@end

@protocol RTCVideoFrameBuffer <NSObject>
@property(readonly, nonatomic) int height;
@property(readonly, nonatomic) int width;
- (id <RTCI420Buffer>)toI420;
@end

@protocol RTCVideoRenderer <NSObject>
- (void)renderFrame:(RTCVideoFrame *)arg1;
- (void)setSize:(struct CGSize)arg1;
@end

@protocol RTCVideoViewShading <NSObject>
- (void)applyShadingForFrameWithWidth:(int)arg1 height:(int)arg2 rotation:(long long)arg3 flip:(_Bool)arg4 plane:(unsigned int)arg5;
- (void)applyShadingForFrameWithWidth:(int)arg1 height:(int)arg2 rotation:(long long)arg3 flip:(_Bool)arg4 yPlane:(unsigned int)arg5 uvPlane:(unsigned int)arg6;
- (void)applyShadingForFrameWithWidth:(int)arg1 height:(int)arg2 rotation:(long long)arg3 flip:(_Bool)arg4 yPlane:(unsigned int)arg5 uPlane:(unsigned int)arg6 vPlane:(unsigned int)arg7;
@end

@protocol RTCYUVPlanarBuffer <RTCVideoFrameBuffer>
@property(readonly, nonatomic) int strideV;
@property(readonly, nonatomic) int strideU;
@property(readonly, nonatomic) int strideY;
@property(readonly, nonatomic) const char *dataV;
@property(readonly, nonatomic) const char *dataU;
@property(readonly, nonatomic) const char *dataY;
@property(readonly, nonatomic) int chromaHeight;
@property(readonly, nonatomic) int chromaWidth;
- (id)initWithWidth:(int)arg1 height:(int)arg2 strideY:(int)arg3 strideU:(int)arg4 strideV:(int)arg5;
- (id)initWithWidth:(int)arg1 height:(int)arg2;
- (id)initWithWidth:(int)arg1 height:(int)arg2 dataY:(const char *)arg3 dataU:(const char *)arg4 dataV:(const char *)arg5;
@end

@interface VideoCameraInternalObjc : NSObject <AVCaptureVideoDataOutputSampleBufferDelegate>
{
    struct RXVideoCaptureCapability capability_;
    AVCaptureSession *capture_session_;
    AVCaptureDevice *capture_device_;
    struct RXVideoSourceCallback *callback_;
    struct RXVideoCaptureEventObserver *evt_observer_;
    NSString *dev_id_;
    NSObject<OS_dispatch_queue> *disp_queue_;
    _Bool running_;
    struct Instanced ins_;
    struct recursive_mutex mutex_;
    long long orientation;
    AVCaptureDevice *_current_device;
}

- (id).cxx_construct;
- (void).cxx_destruct;
@property(retain, nonatomic) AVCaptureDevice *current_device; // @synthesize current_device=_current_device;
@property long long orientation; // @synthesize orientation;
- (void)captureOutput:(id)arg1 didOutputSampleBuffer:(struct opaqueCMSampleBuffer *)arg2 fromConnection:(id)arg3;
- (void)config_capture_format;
- (unsigned int)device_orientation_2_rx_rotation:(long long)arg1 is_front:(_Bool)arg2;
- (void)dealloc;
- (void)onNotification:(id)arg1;
- (void)stop;
- (void)stop_internal;
- (void)start_with_cap:(struct RXVideoCaptureCapability)arg1;
- (void)set_event_observer:(struct RXVideoCaptureEventObserver *)arg1;
- (void)set_callback:(struct RXVideoSourceCallback *)arg1;
- (id)init_with_dev_id:(id)arg1 andQueue:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface NSNotificationListener : NSObject
{
    struct NSNotificationCallbacks *_callbacks;
}

- (void)unregisterObserver;
- (void)registerObserver;
- (void)applicationDidEnterBackground:(id)arg1;
- (void)applicationWillEnterForeground:(id)arg1;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)applicationWillResignActive:(id)arg1;
- (id)initWithCB:(struct NSNotificationCallbacks *)arg1;

@end

@interface ByteEAGLView : UIView
{
    CAEAGLLayer *_eaglLayer;
    unsigned int _framebuffer;
    unsigned int _renderbuffer;
    struct WeakPtr<bytertc::ByteEAGLViewDelegate> _layerDelegate;
}

+ (Class)layerClass;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)setViewDelegate:(struct ByteEAGLViewDelegate *)arg1;
- (void)layoutSubviews;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;

@end

@interface ByteRtciOSCacheUtil : NSObject
{
    NSMutableDictionary *_cacheDict;
}

+ (void)destory;
+ (id)sharedInstance;
- (void).cxx_destruct;
@property(retain, nonatomic) NSMutableDictionary *cacheDict; // @synthesize cacheDict=_cacheDict;
- (void)updateCache;
- (id)getObjectWithKey:(id)arg1;
- (void)addNumber:(id)arg1 Key:(id)arg2;
- (void)addString:(id)arg1 Key:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)init;
- (id)initWithCoder:(id)arg1;

@end

@interface IOSNetReachability : NSObject
{
    struct __SCNetworkReachability *_reachabilityRef;
    int _hasCachedStatus;
    long long _cachedStatus;
    _Bool _startedNotifier;
}

+ (long long)fastDetectActiveIfAddrsStatus;
+ (id)reachabilityForInternetConnection;
+ (id)reachabilityWithAddress:(const struct sockaddr_in *)arg1;
+ (id)reachabilityWithHostName:(id)arg1;
+ (void)initialize;
+ (void)stopNotifier;
+ (void)startNotifier;
+ (id)sharedReachability;
+ (id)carrierName;
+ (_Bool)isNetworkConnected;
+ (_Bool)is5GConnected;
+ (_Bool)is4GConnected;
+ (_Bool)is3GConnected;
+ (_Bool)is2GConnected;
- (_Bool)shouldUpdateCachedStatus:(long long)arg1;
- (void)setCachedStatus:(long long)arg1;
- (void)invalidateCachedStatus;
- (long long)currentNetworkAuthorizationStatus;
- (long long)currentReachabilityStatus;
- (_Bool)connectionRequired;
- (long long)networkStatusForFlags:(unsigned int)arg1;
- (void)applicationDidEnterBackground:(id)arg1;
- (void)dealloc;
- (void)stopNotifier;
- (_Bool)startNotifier;
- (id)initWithReachabilityRef:(struct __SCNetworkReachability *)arg1;

@end

@interface NetworkManager : NSObject
{
    long long preNetworkStatus;
    function_eaa74433 callback;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)networkChanged:(id)arg1;
- (void)SetNetworkStatus:(long long)arg1;
- (void)removeObserver;
- (void)initObserver;
- (void)dealloc;
- (id)initWithCallback:(function_eaa74433)arg1;

@end

@interface ByteRTCAudioMixingManager : NSObject
{
    struct IAudioMixingManager *_audioMixingManager;
}

- (int)pushAudioMixingFrame:(id)arg1;
- (void)disableAudioMixingFrame;
- (void)enableAudioMixingFrame:(long long)arg1;
- (void)setAudioMixingPosition:(int)arg1 position:(int)arg2;
- (int)getAudioMixingCurrentPosition:(int)arg1;
- (int)getAudioMixingDuration:(int)arg1;
- (void)setAudioMixingVolume:(int)arg1 volume:(int)arg2 type:(long long)arg3;
- (void)unloadAudioMixing:(int)arg1;
- (void)preloadAudioMixing:(int)arg1 filePath:(id)arg2;
- (void)resumeAudioMixing:(int)arg1;
- (void)pauseAudioMixing:(int)arg1;
- (void)stopAudioMixing:(int)arg1;
- (void)startAudioMixing:(int)arg1 filePath:(id)arg2 config:(id)arg3;
- (void)dealloc;
- (id)initWithAudioMixingManager:(struct IAudioMixingManager *)arg1;

@end

@interface ByteRTCPositionAudioRender : NSObject
{
    struct IPositionAudioRenderInterface *_positionAudioRender;
}

- (int)updateSelfOrientation:(id)arg1;
- (int)updatePosition:(id)arg1;
- (void)enableAudioSpatialRender:(_Bool)arg1;
- (void)dealloc;
- (id)initWithPositionAudioRender:(struct IPositionAudioRenderInterface *)arg1;

@end

@interface WeakDelegateAudioFrameObserver : NSObject
{
    id _delegate;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) __weak id delegate; // @synthesize delegate=_delegate;
- (id)initWithDelegate:(id)arg1;

@end

@interface WeakDelegateAudioProcessor : NSObject
{
    id _delegate;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) __weak id delegate; // @synthesize delegate=_delegate;
- (id)initWithDelegate:(id)arg1;

@end

@interface WeakDelegateClientMix : NSObject
{
    id _delegate;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) __weak id delegate; // @synthesize delegate=_delegate;
- (id)initWithDelegate:(id)arg1;

@end

@interface NSBoolean : NSObject
{
    _Bool _boolValue;
}

@property(nonatomic) _Bool boolValue; // @synthesize boolValue=_boolValue;
- (id)init:(_Bool)arg1;

@end

@interface ByteRTCScreenShareManager : NSObject
{
    NSObject<ByteRTCScreenSharable> *_delegate;
}

+ (void)tearDown;
+ (id)shared;
- (void).cxx_destruct;
@property(nonatomic) __weak NSObject<ByteRTCScreenSharable> *delegate; // @synthesize delegate=_delegate;
- (void)dealloc;
- (void)stopShare;
- (int)showShareWithDelegate:(id)arg1 extension:(id)arg2;

@end

@interface ByteRTCAudioDeviceManager : NSObject
{
    struct IAudioDeviceManagerEx *iAudioDeviceManager;
    struct AudioDeviceEventHandlerImpl *handler_impl;
}

- (void)dealloc;
- (void)setEnableSpeakerphone:(_Bool)arg1;
- (int)stopAudioRecordingDeviceTest;
- (int)startAudioRecordingDeviceTest:(unsigned int)arg1;
- (int)stopPlaybackDeviceTest;
- (int)startPlaybackDeviceTest:(id)arg1;
- (id)initDeviceManager:(id)arg1;

@end

@interface ByteRTCEngineKit : NSObject <ByteRTCAudioFrameObserver, ByteRTCAudioProcessor, ByteRTCEngineDelegate, LiveTranscodingDelegate, ByteRTCMediaMetadataObserver, ByteRTCScreenSharable>
{
    struct ByteRtcEngineEventHandler *_byteRtcEngineEventHandler;
    struct VideoFrameObserverObjC *_byteiOSVideoFrameObserver;
    struct unique_ptr<bytertc::VideoProcessorObjC, std::__1::default_delete<bytertc::VideoProcessorObjC>> _byteCustomVideoPreprocessor;
    struct LocalEncodedVideoFrameObserverObjC *_byteiOSLocalEncodedVideoFrameObserver;
    struct IRtcEngine *_rtcEngine;
    struct ByteRtcAudioFrameObserverOCC *_byteRtcAudioFrameObserverOCC;
    struct ByteRtcAudioProcessorOCC *_byteRtcAudioProcessorOCC;
    struct ITranscoderObserver *_transcoderObserver;
    struct ByteRtcInternalEventHandler *_internalEventHandler;
    struct ByteRtcMediaMetaDataObserverOCC *_byteRtcMediaMetaDataObserverOCC;
    struct ByteRtcEngineEncryptHandler encrypt_handler_;
    struct ByteRtcASREventHandler asr_handler;
    struct RemoteEncodedVideoFrameObserverObjC *_byteIOSRemoteEncodedVideoFrameObserver;
    struct ExternalVideoEncoderEventHandlerObjC *_byteIOSExternalVideoEncoderEventHandler;
    _Bool _captureExtensionRunning;
    _Bool _isFirstConnect;
    _Bool _enableRtcVideo;
    _Bool _enableRtcAudio;
    id <ByteRTCEngineDelegate> _delegate;
    id <ByteRTCMonitorDelegate> _monitorDelegate;
    ByteRTCScreenCaptureParam *_captureParam;
    NSString *_groupId;
    CDUnknownBlockType _leaveChannelBlock;
    CDUnknownBlockType _reportCallBack;
    NSString *_appid;
    NSString *_localUid;
    NSString *_channelName;
    long long _nowClientRole;
    ByteRTCLiveTranscoding *_transCoding;
    NSMutableDictionary *_rtcRoomManager;
    id <ByteRTCMediaMetadataObserver> _mediaMetadataDataDelegate;
    ByteRTCAudioMixingManager *_audioMixingManager;
    ByteRTCPositionAudioRender *_positionAudioRender;
    NSString *_userAgentIP;
    NSString *_signalServerAddr;
    NSString *_trunkServerAddr;
    NSArray *_configHostsArray;
    NSString *_signalHost;
}

+ (id)GetNetworkType;
+ (id)createAudioDeviceManager:(id)arg1;
+ (_Bool)isHttpClientSet;
+ (id)getHttpClient;
+ (void)setHttpClient:(id)arg1;
+ (void)setDeviceId:(id)arg1;
+ (id)getErrorDescription:(long long)arg1;
+ (unsigned long long)getSdkVersionNum;
+ (id)getGitCommit;
+ (int)setParameters:(id)arg1;
+ (int)setEnv:(long long)arg1;
+ (id)getSdkVersion;
+ (void)destroy;
+ (id)sharedInstance;
+ (id)sharedEngineWithAppId:(id)arg1 delegate:(id)arg2;
+ (id)sharedEngineWithAppId:(id)arg1 delegate:(id)arg2 monitorDelegate:(id)arg3;
- (id).cxx_construct;
- (void).cxx_destruct;
@property(nonatomic) _Bool enableRtcAudio; // @synthesize enableRtcAudio=_enableRtcAudio;
@property(nonatomic) _Bool enableRtcVideo; // @synthesize enableRtcVideo=_enableRtcVideo;
@property(nonatomic) _Bool isFirstConnect; // @synthesize isFirstConnect=_isFirstConnect;
@property(retain, nonatomic) NSString *signalHost; // @synthesize signalHost=_signalHost;
@property(retain, nonatomic) NSArray *configHostsArray; // @synthesize configHostsArray=_configHostsArray;
@property(retain, nonatomic) NSString *trunkServerAddr; // @synthesize trunkServerAddr=_trunkServerAddr;
@property(retain, nonatomic) NSString *signalServerAddr; // @synthesize signalServerAddr=_signalServerAddr;
@property(retain, nonatomic) NSString *userAgentIP; // @synthesize userAgentIP=_userAgentIP;
@property(retain, nonatomic) ByteRTCPositionAudioRender *positionAudioRender; // @synthesize positionAudioRender=_positionAudioRender;
@property(retain, nonatomic) ByteRTCAudioMixingManager *audioMixingManager; // @synthesize audioMixingManager=_audioMixingManager;
@property(nonatomic) __weak id <ByteRTCMediaMetadataObserver> mediaMetadataDataDelegate; // @synthesize mediaMetadataDataDelegate=_mediaMetadataDataDelegate;
@property(retain, nonatomic) NSMutableDictionary *rtcRoomManager; // @synthesize rtcRoomManager=_rtcRoomManager;
@property(retain, nonatomic) ByteRTCLiveTranscoding *transCoding; // @synthesize transCoding=_transCoding;
@property(nonatomic) long long nowClientRole; // @synthesize nowClientRole=_nowClientRole;
@property(retain, nonatomic) NSString *channelName; // @synthesize channelName=_channelName;
@property(retain, nonatomic) NSString *localUid; // @synthesize localUid=_localUid;
@property(retain, nonatomic) NSString *appid; // @synthesize appid=_appid;
@property(copy, nonatomic) CDUnknownBlockType reportCallBack; // @synthesize reportCallBack=_reportCallBack;
@property(copy, nonatomic) CDUnknownBlockType leaveChannelBlock; // @synthesize leaveChannelBlock=_leaveChannelBlock;
@property(nonatomic) _Bool captureExtensionRunning; // @synthesize captureExtensionRunning=_captureExtensionRunning;
@property(copy, nonatomic) NSString *groupId; // @synthesize groupId=_groupId;
@property(retain, nonatomic) ByteRTCScreenCaptureParam *captureParam; // @synthesize captureParam=_captureParam;
@property(nonatomic) __weak id <ByteRTCMonitorDelegate> monitorDelegate; // @synthesize monitorDelegate=_monitorDelegate;
@property(nonatomic) __weak id <ByteRTCEngineDelegate> delegate; // @synthesize delegate=_delegate;
- (void)resumeForwardStreamToAllRooms;
- (void)pauseForwardStreamToAllRooms;
- (void)stopForwardStreamToRooms;
- (int)updateForwardStreamToRooms:(id)arg1;
- (int)startForwardStreamToRooms:(id)arg1;
- (int)sendStreamSyncInfo:(id)arg1 config:(id)arg2;
- (void)registerRemoteEncodedVideoFrameObserver:(id)arg1;
- (void)requestRemoteVideoKeyFrame:(id)arg1;
- (void)setVideoDecoderConfig:(id)arg1 withVideoDecoderConfig:(long long)arg2;
- (_Bool)pushExternalEncodedVideoFrame:(long long)arg1 withVideoIndex:(long long)arg2 withEncodedVideoFrame:(id)arg3;
- (void)setExternalVideoEncoderEventHandler:(id)arg1;
- (void)setVideoSourceType:(long long)arg1 WithStreamIndex:(long long)arg2;
- (void)setInternalEventDelegate:(id)arg1;
- (void)onAudioPlaybackDeviceChanged:(long long)arg1;
- (void)receiveVideoFrameFromUID:(id)arg1 withExtendedData:(id)arg2 atTimestamp:(double)arg3;
- (id)videoFrameMediaMetaDataAtTime:(double)arg1;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)applicationWillResignActive:(id)arg1;
- (void)applicationWillEnterForeground:(id)arg1;
- (void)applicationDidEnterBackground:(id)arg1;
- (void)removeBackgroundObserver;
- (void)initBackgroundObserver;
- (void)forceCrash:(int)arg1;
- (void)notifyErrorCode:(long long)arg1;
- (void)enableSubscribeSelf:(_Bool)arg1;
- (int)feedbackTypes:(id)arg1 desc:(id)arg2;
- (int)setBusinessId:(id)arg1;
- (int)enableRangeAudio:(_Bool)arg1;
- (int)updateSelfPosition:(int)arg1 y:(int)arg2 z:(int)arg3;
- (int)updateAudioRecvRange:(int)arg1 maxRange:(int)arg2;
- (int)setTeamId:(id)arg1;
- (int)setAudioRecvMode:(unsigned long long)arg1;
- (int)setAudioSendMode:(unsigned long long)arg1;
- (int)setRtcMode:(unsigned long long)arg1;
- (int)sendRoomBinaryMessage:(id)arg1;
- (int)sendRoomMessage:(id)arg1;
- (id)getPositionAudioRender;
- (id)getAudioMixingManager;
- (void)stopFileRecording:(long long)arg1;
- (int)startFileRecording:(long long)arg1 withRecordingConfig:(id)arg2;
- (int)pushScreenAudioFrame:(id)arg1;
- (void)setCaptureVolume:(long long)arg1 volume:(int)arg2;
- (void)stopScreenAudioCapture;
- (void)startScreenAudioCapture;
- (void)setScreenAudioStreamIndex:(long long)arg1;
- (void)setScreenAudioSourceType:(long long)arg1;
- (void)stopNetworkDetection;
- (long long)startNetworkDetection:(_Bool)arg1 uplinkBandwidth:(int)arg2 downlink:(_Bool)arg3 downlinkBandwidth:(int)arg4;
- (long long)sendServerBinaryMessage:(id)arg1;
- (long long)sendServerMessage:(id)arg1;
- (long long)sendUserBinaryMessageOutsideRoom:(id)arg1 message:(id)arg2;
- (long long)sendUserMessageOutsideRoom:(id)arg1 message:(id)arg2;
- (void)getPeerOnlineStatus:(id)arg1;
- (void)setServerParams:(id)arg1 url:(id)arg2;
- (void)updateLoginToken:(id)arg1;
- (void)logout;
- (void)login:(id)arg1 uid:(id)arg2;
- (void)stopASR;
- (void)startASR:(id)arg1 handler:(id)arg2;
- (void)setRuntimeParameters:(id)arg1;
- (void)setCustomizeEncryptHandler:(id)arg1;
- (void)setEncryptType:(unsigned long long)arg1 key:(id)arg2;
- (int)setRemoteUserPriority:(unsigned long long)arg1 uid:(id)arg2;
- (void)pushScreenCaptureFrame:(struct __CVBuffer *)arg1 time:(CDStruct_1b6d18a9)arg2 rotation:(int)arg3;
- (void)stopScreenSharing;
- (void)onScreenCaptureExtensionQuit;
- (int)onScreenCaptureExtensionStartup;
- (int)startScreenSharingWithPreferredExtension:(id)arg1 groupId:(id)arg2;
- (void)unpublishScreen;
- (void)publishScreen;
- (int)setScreenCapture:(_Bool)arg1 Rect:(struct CGRect)arg2 screenCaptureParam:(id)arg3;
- (int)setSubscribeFallbackOption:(unsigned long long)arg1;
- (int)setPublishFallbackOption:(unsigned long long)arg1;
- (int)stopAllEffects;
- (int)resumeAllEffects;
- (int)pauseAllEffects;
- (int)unloadAllEffects;
- (int)setEffectsVolume:(long long)arg1;
- (int)stopEffect:(long long)arg1;
- (int)resumeEffect:(long long)arg1;
- (int)pauseEffect:(long long)arg1;
- (int)unloadEffect:(long long)arg1;
- (int)preloadEffect:(long long)arg1 filePath:(id)arg2;
- (int)playEffect:(long long)arg1 filePath:(id)arg2 loopback:(_Bool)arg3 cycle:(long long)arg4 withVolume:(long long)arg5;
- (int)getEffectVolume:(long long)arg1;
- (int)setVolumeOfEffect:(long long)arg1 withVolume:(long long)arg2;
- (int)adjustAudioMixingPublishVolume:(long long)arg1;
- (int)adjustAudioMixingPlayoutVolume:(long long)arg1;
- (int)setAudioMixingPosition:(long long)arg1;
- (int)startAudioMixing:(id)arg1 loopback:(_Bool)arg2 replace:(_Bool)arg3 cycle:(long long)arg4;
- (int)adjustAudioMixingVolume:(long long)arg1;
- (int)resumeAudioMixing;
- (int)pauseAudioMixing;
- (int)stopAudioMixing;
- (int)getAudioMixingCurrentPosition;
- (int)getAudioMixingDuration;
- (void)setRemoteAudioPlaybackVolume:(id)arg1 volume:(int)arg2;
- (long long)sendUserBinaryMessage:(id)arg1 message:(id)arg2;
- (long long)sendUserMessage:(id)arg1 message:(id)arg2;
- (int)pullExternalAudioFrame:(id)arg1;
- (int)pushExternalAudioFrame:(id)arg1;
- (_Bool)registerLocalAudioProcessor:(id)arg1 format:(id)arg2;
- (_Bool)setAudioFrameObserver:(id)arg1;
- (_Bool)setMixedAudioFrameParameters:(long long)arg1 channels:(long long)arg2;
- (_Bool)setPlaybackAudioFrameParameters:(long long)arg1 channels:(long long)arg2;
- (_Bool)setRecordingAudioFrameParameters:(long long)arg1 channels:(long long)arg2;
- (_Bool)pushAudioMixingStreamData:(void *)arg1 frameNum:(int)arg2;
- (int)getAudioMixingStreamCachedFrameNum;
- (_Bool)setAudioPlayoutMixStream:(_Bool)arg1 sampleRate:(int)arg2 channelNum:(int)arg3;
- (void)disableExternalAudioDevice;
- (void)enableExternalAudioDevice:(id)arg1 playbackFormat:(id)arg2;
- (_Bool)pushExternalVideoFrame:(struct __CVBuffer *)arg1 time:(CDStruct_1b6d18a9)arg2 rotation:(long long)arg3 extendedData:(id)arg4 supplementaryInfo:(id)arg5 cropLeft:(int)arg6 cropTop:(int)arg7 cropRight:(int)arg8 cropBottom:(int)arg9 timestame:(long long)arg10;
- (_Bool)pushExternalByteVideoFrame:(id)arg1;
- (_Bool)pushExternalVideoFrame:(struct __CVBuffer *)arg1 time:(CDStruct_1b6d18a9)arg2 rotation:(long long)arg3 extendedData:(id)arg4 supplementaryInfo:(id)arg5;
- (_Bool)pushExternalVideoFrame:(struct __CVBuffer *)arg1 time:(CDStruct_1b6d18a9)arg2 rotation:(long long)arg3;
- (_Bool)pushExternalVideoFrame:(struct __CVBuffer *)arg1 time:(CDStruct_1b6d18a9)arg2;
- (void)setVideoSourceType:(long long)arg1;
- (void)setVideoInputType:(long long)arg1;
- (int)disableCloudRending;
- (int)updateCloudRending:(id)arg1;
- (int)enableCloudRending:(id)arg1;
- (int)updateLiveTranscoding:(id)arg1;
- (int)stopLiveTranscoding;
- (int)startLiveTranscoding:(id)arg1 observer:(id)arg2;
- (id)cloudRendingInfoToJson:(id)arg1 Action:(id)arg2;
- (struct LiveTranscodingConfig)convertToTranscodingConfig:(id)arg1;
- (id)TransCodeProfiletoJson:(id)arg1 Action:(id)arg2;
- (int)setAudioPlaybackDevice:(long long)arg1;
- (void)unSubscribeStream:(id)arg1 isScreen:(_Bool)arg2;
- (void)subscribeUserStream:(id)arg1 streamType:(long long)arg2 mediaType:(long long)arg3 videoConfig:(id)arg4;
- (void)subscribeStream:(id)arg1 subscribeConfig:(id)arg2;
- (_Bool)enableAutoSubscribe:(unsigned long long)arg1 videoMode:(unsigned long long)arg2;
- (void)registerLocalEncodedVideoFrameObserver:(id)arg1;
- (int)registerLocalVideoProcessor:(id)arg1 withConfig:(id)arg2;
- (_Bool)setVideoFrameObserver:(id)arg1;
- (int)sendSEIMessage:(long long)arg1 andMessage:(id)arg2 andRepeatCount:(int)arg3;
- (_Bool)setMediaMetadataObserver:(id)arg1;
- (int)setVideoEffectColorFilterIntensity:(float)arg1;
- (int)setVideoEffectColorFilter:(id)arg1;
- (int)updateVideoEffectNode:(id)arg1 nodeKey:(id)arg2 nodeValue:(float)arg3;
- (int)setVideoEffectNodes:(id)arg1;
- (void)setVideoEffectAlgoModelPath:(id)arg1;
- (int)enableVideoEffect:(_Bool)arg1;
- (int)checkVideoEffectLicense:(id)arg1;
- (int)replaceBackground:(unsigned long long)arg1 withDivideModel:(unsigned long long)arg2;
- (int)switchCamera:(long long)arg1;
- (int)setLocalVideoMirrorType:(unsigned long long)arg1;
- (int)setLocalVideoMirrorMode:(unsigned long long)arg1;
- (int)muteAllRemoteVideo:(long long)arg1;
- (int)muteRemoteVideo:(id)arg1 withMuteState:(long long)arg2;
- (void)muteLocalVideo:(long long)arg1;
- (void)stopVideoCapture;
- (void)startVideoCapture;
- (int)setRemoteVideoCanvas:(id)arg1 withIndex:(long long)arg2 withCanvas:(id)arg3;
- (int)setLocalVideoCanvas:(long long)arg1 withCanvas:(id)arg2;
- (int)setVideoCaptureConfig:(id)arg1;
- (int)setVideoEncoderConfig:(long long)arg1 config:(id)arg2;
- (int)setVideoEncoderConfig:(id)arg1;
- (int)setRemoteVideoRenderer:(id)arg1 forUserId:(id)arg2;
- (int)setRemoteVideoRenderer:(id)arg1 forRoomId:(id)arg2 forUserId:(id)arg3;
- (int)setLocalVideoRenderer:(id)arg1 forRoomId:(id)arg2 forUserId:(id)arg3;
- (int)setLocalVideoRenderer:(id)arg1;
- (void)setRemoteVideoSink:(id)arg1 withSink:(id)arg2 withPixelFormat:(long long)arg3;
- (void)setLocalVideoSink:(long long)arg1 withSink:(id)arg2 withPixelFormat:(long long)arg3;
- (void)enableAudioPropertiesReport:(id)arg1;
- (void)setEarMonitorVolume:(long long)arg1;
- (void)setEarMonitorMode:(long long)arg1;
- (void)setPlaybackVolume:(long long)arg1;
- (void)setRecordingVolume:(long long)arg1;
- (void)setAudioVolumeIndicationInterval:(long long)arg1;
- (void)resumeAllSubscribedStream:(long long)arg1;
- (void)pauseAllSubscribedStream:(long long)arg1;
- (void)muteAllRemoteAudio:(long long)arg1;
- (void)muteRemoteAudio:(id)arg1 muteState:(long long)arg2;
- (void)muteLocalAudio:(long long)arg1;
- (void)setAudioProfile:(long long)arg1;
- (void)setAudioScenario:(long long)arg1;
- (void)stopAudioCapture;
- (void)startAudioCapture;
- (int)updateToken:(id)arg1;
- (int)leaveRoom;
- (int)leaveRoom:(CDUnknownBlockType)arg1;
- (int)leaveRoomInternal;
- (void)resetValue;
- (int)joinRoomByKey:(id)arg1 roomId:(id)arg2 userInfo:(id)arg3 rtcRoomConfig:(id)arg4;
- (int)joinRoomByKey:(id)arg1 roomId:(id)arg2 roomProfile:(long long)arg3 userInfo:(id)arg4;
- (id)getDefaultTokenWithAppid:(id)arg1 ChannelName:(id)arg2 UserID:(id)arg3;
- (long long)clientRole;
- (_Bool)unpublish;
- (_Bool)publish;
- (_Bool)setUserVisibility:(_Bool)arg1;
- (_Bool)setUserRole:(long long)arg1;
- (void)setClientProperty:(id)arg1;
- (void)destroyRtcRoom:(id)arg1;
- (id)createRtcRoom:(id)arg1;
- (void)destroyResource;
- (void)dealloc;
- (void)destroyEngine;
- (id)initWithAppId:(id)arg1 delegate:(id)arg2 parameters:(id)arg3;
- (id)initWithAppId:(id)arg1 delegate:(id)arg2 monitorDelegate:(id)arg3 parameters:(id)arg4;
- (void)onMixedAudioFrame:(id)arg1;
- (void)onPlaybackAudioFrameBeforeMixing:(id)arg1 audioFrame:(id)arg2;
- (void)onPlaybackAudioFrame:(id)arg1;
- (void)onRecordAudioFrame:(id)arg1;
@property(retain, nonatomic) id audioFrameObserverDelegate;
- (int)processAudioFrame:(id)arg1;
@property(retain, nonatomic) id audioProcessorDelegate;
- (void)rtcEngine:(id)arg1 onForwardStreamEvent:(id)arg2;
- (void)rtcEngine:(id)arg1 onForwardStreamStateChanged:(id)arg2;
- (void)rtcEngine:(id)arg1 onRecordingProgressUpdate:(long long)arg2 process:(id)arg3 recording_info:(id)arg4;
- (void)rtcEngine:(id)arg1 onRecordingStateUpdate:(long long)arg2 state:(long long)arg3 error_code:(long long)arg4 recording_info:(id)arg5;
- (void)rtcEngine:(id)arg1 onLeaveRoomWithStats:(id)arg2;
- (void)willLeaveRoom;
- (void)rtcEngine:(id)arg1 OnSimulcastSubscribeFallback:(id)arg2;
- (void)rtcEngine:(id)arg1 onRoomStats:(id)arg2;
- (void)rtcEngine:(id)arg1 onPerformanceAlarmsWithMode:(long long)arg2 roomId:(id)arg3 reason:(long long)arg4 sourceWantedData:(id)arg5;
- (void)rtcEngine:(id)arg1 onLiveTranscodingResult:(id)arg2 errorCode:(long long)arg3;
- (void)rtcEngine:(id)arg1 onAudioMixingStateChanged:(long long)arg2 state:(long long)arg3 error:(long long)arg4;
- (void)rtcEngineDidAudioEffectFinish:(id)arg1 soundId:(long long)arg2;
- (void)rtcEngineLocalAudioMixingDidFinish:(id)arg1;
- (void)rtcEngine:(id)arg1 log:(id)arg2;
- (void)rtcEngine:(id)arg1 didUnSubscribe:(id)arg2 isReconnect:(_Bool)arg3;
- (void)rtcEngine:(id)arg1 didSubscribe:(id)arg2 isReconnect:(_Bool)arg3;
- (void)rtcEngine:(id)arg1 onNetworkDetectionStopped:(unsigned long long)arg2;
- (void)rtcEngine:(id)arg1 onNetworkDetectionResult:(unsigned long long)arg2 quality:(unsigned long long)arg3 rtt:(int)arg4 lostRate:(double)arg5 bitrate:(int)arg6 jitter:(int)arg7;
- (void)rtcEngine:(id)arg1 onServerMessageSendResult:(long long)arg2 error:(long long)arg3;
- (void)rtcEngine:(id)arg1 onUserMessageSendResultOutsideRoom:(long long)arg2 error:(long long)arg3;
- (void)rtcEngine:(id)arg1 onUserBinaryMessageReceivedOutsideRoom:(id)arg2 message:(id)arg3;
- (void)rtcEngine:(id)arg1 onUserMessageReceivedOutsideRoom:(id)arg2 message:(id)arg3;
- (void)rtcEngine:(id)arg1 onGetPeerOnlineStatus:(id)arg2 status:(long long)arg3;
- (void)rtcEngine:(id)arg1 onServerParamsSetResult:(long long)arg2;
- (void)rtcEngineOnLogout:(id)arg1;
- (void)rtcEngine:(id)arg1 onLoginResult:(id)arg2 errorCode:(long long)arg3 elapsed:(long long)arg4;
- (void)rtcEngine:(id)arg1 onRoomMessageSendResult:(long long)arg2 error:(long long)arg3;
- (void)rtcEngine:(id)arg1 onUserMessageSendResult:(long long)arg2 error:(long long)arg3;
- (void)rtcEngine:(id)arg1 onUserBinaryMessageReceived:(id)arg2 message:(id)arg3;
- (void)rtcEngine:(id)arg1 onUserMessageReceived:(id)arg2 message:(id)arg3;
- (void)rtcEngine:(id)arg1 onRemoteVideoStateChanged:(id)arg2 withVideoState:(long long)arg3 withVideoStateReason:(long long)arg4;
- (void)rtcEngine:(id)arg1 onLocalVideoStateChanged:(long long)arg2 withStreamState:(long long)arg3 withStreamError:(long long)arg4;
- (void)rtcEngine:(id)arg1 onRemoteAudioStateChanged:(id)arg2 state:(long long)arg3 reason:(long long)arg4;
- (void)rtcEngine:(id)arg1 onLocalAudioStateChanged:(long long)arg2 error:(long long)arg3;
- (void)rtcEngine:(id)arg1 onRemoteStreamStats:(id)arg2;
- (void)rtcEngine:(id)arg1 onLocalStreamStats:(id)arg2;
- (void)rtcEngine:(id)arg1 reportSysStats:(id)arg2;
- (void)rtcEngine:(id)arg1 onStreamSyncInfoReceived:(id)arg2 streamType:(long long)arg3 data:(id)arg4;
- (void)rtcEngine:(id)arg1 onRemoteAudioPropertiesReport:(id)arg2 totalRemoteVolume:(long long)arg3;
- (void)rtcEngine:(id)arg1 onLocalAudioPropertiesReport:(id)arg2;
- (void)rtcEngine:(id)arg1 onSEIMessageReceived:(id)arg2 andMessage:(id)arg3;
- (void)rtcEngine:(id)arg1 onRoomBinaryMessageReceived:(id)arg2 message:(id)arg3;
- (void)rtcEngine:(id)arg1 onRoomMessageReceived:(id)arg2 message:(id)arg3;
- (void)rtcEngine:(id)arg1 onAudioPlaybackDeviceChanged:(long long)arg2;
- (void)rtcEngine:(id)arg1 didUserAudioRecvModeChange:(id)arg2 mode:(unsigned long long)arg3;
- (void)rtcEngine:(id)arg1 didUserAudioSendModeChange:(id)arg2 mode:(unsigned long long)arg3;
- (void)rtcEngine:(id)arg1 didStreamRemoved:(id)arg2 stream:(id)arg3 reason:(long long)arg4;
- (void)rtcEngine:(id)arg1 onStreamSubscribed:(long long)arg2 userId:(id)arg3 subscribeConfig:(id)arg4;
- (void)rtcEngine:(id)arg1 onStreamAdd:(id)arg2;
- (void)rtcEngine:(id)arg1 onFirstLocalAudioFrame:(long long)arg2;
- (void)rtcEngine:(id)arg1 onScreenVideoFramePlayStateChanged:(id)arg2 state:(unsigned long long)arg3;
- (void)rtcEngine:(id)arg1 onVideoFramePlayStateChanged:(id)arg2 state:(unsigned long long)arg3;
- (void)rtcEngine:(id)arg1 onAudioFramePlayStateChanged:(id)arg2 state:(unsigned long long)arg3;
- (void)rtcEngine:(id)arg1 onScreenVideoFrameSendStateChanged:(id)arg2 state:(unsigned long long)arg3;
- (void)rtcEngine:(id)arg1 onVideoFrameSendStateChanged:(id)arg2 state:(unsigned long long)arg3;
- (void)rtcEngine:(id)arg1 onAudioFrameSendStateChanged:(id)arg2 state:(unsigned long long)arg3;
- (void)rtcEngine:(id)arg1 onMediaDeviceStateChanged:(id)arg2 device_type:(long long)arg3 device_state:(long long)arg4 device_error:(long long)arg5;
- (void)rtcEngine:(id)arg1 remoteVideoStateChangedOfUid:(id)arg2 state:(long long)arg3;
- (void)rtcEngine:(id)arg1 onLocalVideoSizeChanged:(long long)arg2 withFrameInfo:(id)arg3;
- (void)rtcEngine:(id)arg1 onRemoteVideoSizeChanged:(id)arg2 withFrameInfo:(id)arg3;
- (void)rtcEngine:(id)arg1 onFirstRemoteVideoFrameRendered:(id)arg2 withFrameInfo:(id)arg3;
- (void)rtcEngine:(id)arg1 onFirstLocalVideoFrameCaptured:(long long)arg2 withFrameInfo:(id)arg3;
- (void)rtcEngine:(id)arg1 onUserMuteVideo:(id)arg2 withMuteState:(long long)arg3;
- (void)rtcEngine:(id)arg1 onAudioVolumeIndication:(id)arg2 totalRemoteVolume:(long long)arg3;
- (void)rtcEngine:(id)arg1 onFirstRemoteAudioFrame:(id)arg2;
- (void)rtcEngine:(id)arg1 onUserStopVideoCapture:(id)arg2;
- (void)rtcEngine:(id)arg1 onUserStartVideoCapture:(id)arg2;
- (void)rtcEngine:(id)arg1 onUserStopAudioCapture:(id)arg2;
- (void)rtcEngine:(id)arg1 onUserStartAudioCapture:(id)arg2;
- (void)rtcEngine:(id)arg1 didLocalAudioEnabled:(_Bool)arg2 byUid:(id)arg3;
- (void)rtcEngine:(id)arg1 onUserMuteAudio:(id)arg2 muteState:(long long)arg3;
- (void)rtcEngine:(id)arg1 onMuteAllRemoteVideo:(id)arg2 withMuteState:(long long)arg3;
- (void)rtcEngine:(id)arg1 onMuteAllRemoteAudio:(id)arg2 muteState:(long long)arg3;
- (void)rtcEngine:(id)arg1 onAudioStreamBanned:(id)arg2 isBanned:(_Bool)arg3;
- (void)rtcEngine:(id)arg1 onVideoStreamBanned:(id)arg2 isBanned:(_Bool)arg3;
- (void)rtcEngine:(id)arg1 onSocks5ProxyState:(long long)arg2 cmd:(id)arg3 proxy_address:(id)arg4 local_address:(id)arg5 remote_address:(id)arg6;
- (void)rtcEngine:(id)arg1 onHttpsProxyState:(long long)arg2;
- (void)rtcEngine:(id)arg1 onHttpProxyState:(long long)arg2;
- (void)rtcEngine:(id)arg1 onStreamPublishSuccess:(id)arg2 isScreen:(_Bool)arg3;
- (void)rtcEngine:(id)arg1 onUserLeave:(id)arg2 reason:(unsigned long long)arg3;
- (void)rtcEngine:(id)arg1 onUserJoined:(id)arg2 elapsed:(long long)arg3;
- (void)rtcEngine:(id)arg1 onJoinRoomResult:(id)arg2 withUid:(id)arg3 errorCode:(long long)arg4 joinType:(long long)arg5 elapsed:(long long)arg6;
- (void)rtcEngine:(id)arg1 networkTypeChangedToType:(long long)arg2;
- (void)rtcEngine:(id)arg1 connectionChangedToState:(long long)arg2;
- (void)rtcEngine:(id)arg1 onError:(long long)arg2;
- (void)rtcEngine:(id)arg1 onWarning:(long long)arg2;
- (void)onMixingDataFrame:(id)arg1;
- (void)onMixingAudioFrame:(id)arg1;
- (void)onMixingVideoFrame:(id)arg1;
- (void)onStreamMixingEvent:(unsigned long long)arg1 eventData:(id)arg2 error:(long long)arg3 mixType:(unsigned long long)arg4;
- (_Bool)isSupportClientPushStream;
- (void)rtcEngine:(id)arg1 onStreamMixingEvent:(unsigned long long)arg2 eventData:(id)arg3 error:(long long)arg4 mixType:(unsigned long long)arg5;
@property(retain, nonatomic) id clientMixTranscodingDelegate;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ByteRTCVideoCompositingLayout : NSObject
{
    NSString *_backgroundColor;
    NSArray *_regions;
    NSString *_appData;
}

- (void).cxx_destruct;
@property(copy, nonatomic) NSString *appData; // @synthesize appData=_appData;
@property(copy, nonatomic) NSArray *regions; // @synthesize regions=_regions;
@property(copy, nonatomic) NSString *backgroundColor; // @synthesize backgroundColor=_backgroundColor;

@end

@interface ByteRTCVideoSolution : NSObject
{
    long long _frameRate;
    long long _maxKbps;
    long long _mode;
    long long _encoderPreference;
    struct CGSize _videoSize;
}

@property(nonatomic) long long encoderPreference; // @synthesize encoderPreference=_encoderPreference;
@property(nonatomic) long long mode; // @synthesize mode=_mode;
@property(nonatomic) long long maxKbps; // @synthesize maxKbps=_maxKbps;
@property(nonatomic) long long frameRate; // @synthesize frameRate=_frameRate;
@property(nonatomic) struct CGSize videoSize; // @synthesize videoSize=_videoSize;
- (_Bool)isValid;
- (id)description;
- (id)init;

@end

@interface ByteRTCVideoCaptureConfig : NSObject
{
    long long _frameRate;
    struct CGSize _videoSize;
}

@property(nonatomic) long long frameRate; // @synthesize frameRate=_frameRate;
@property(nonatomic) struct CGSize videoSize; // @synthesize videoSize=_videoSize;

@end

@interface ByteRTCSubscribeConfig : NSObject
{
    _Bool _isScreen;
    _Bool _subscribeVideo;
    _Bool _subscribeAudio;
    long long _videoIndex;
}

@property(nonatomic) long long videoIndex; // @synthesize videoIndex=_videoIndex;
@property(nonatomic) _Bool subscribeAudio; // @synthesize subscribeAudio=_subscribeAudio;
@property(nonatomic) _Bool subscribeVideo; // @synthesize subscribeVideo=_subscribeVideo;
@property(nonatomic) _Bool isScreen; // @synthesize isScreen=_isScreen;

@end

@interface ByteRTCVideoCanvas : NSObject
{
    UIView *_view;
    unsigned long long _renderMode;
    NSString *_roomId;
    NSString *_uid;
}

- (void).cxx_destruct;
@property(retain, nonatomic) NSString *uid; // @synthesize uid=_uid;
@property(retain, nonatomic) NSString *roomId; // @synthesize roomId=_roomId;
@property(nonatomic) unsigned long long renderMode; // @synthesize renderMode=_renderMode;
@property(retain, nonatomic) UIView *view; // @synthesize view=_view;

@end

@interface ByteRTCAudioFrame : NSObject
{
    int _samples;
    NSData *_buffer;
    long long _channel;
    long long _sampleRate;
}

- (void).cxx_destruct;
@property(nonatomic) long long sampleRate; // @synthesize sampleRate=_sampleRate;
@property(nonatomic) long long channel; // @synthesize channel=_channel;
@property(nonatomic) int samples; // @synthesize samples=_samples;
@property(retain, nonatomic) NSData *buffer; // @synthesize buffer=_buffer;

@end

@interface ByteRTCVideoFrame : NSObject
{
    int _format;
    int _stride;
    int _strideInPixels;
    int _width;
    int _height;
    int _cropLeft;
    int _cropTop;
    int _cropRight;
    int _cropBottom;
    int _flip;
    struct __CVBuffer *_textureBuf;
    NSData *_dataBuf;
    long long _rotation;
    ByteRTCFrameExtendedData *_extendedData;
    CDStruct_1b6d18a9 _time;
}

- (void).cxx_destruct;
@property(retain, nonatomic) ByteRTCFrameExtendedData *extendedData; // @synthesize extendedData=_extendedData;
@property(nonatomic) int flip; // @synthesize flip=_flip;
@property(nonatomic) long long rotation; // @synthesize rotation=_rotation;
@property(nonatomic) int cropBottom; // @synthesize cropBottom=_cropBottom;
@property(nonatomic) int cropRight; // @synthesize cropRight=_cropRight;
@property(nonatomic) int cropTop; // @synthesize cropTop=_cropTop;
@property(nonatomic) int cropLeft; // @synthesize cropLeft=_cropLeft;
@property(retain, nonatomic) NSData *dataBuf; // @synthesize dataBuf=_dataBuf;
@property(nonatomic) struct __CVBuffer *textureBuf; // @synthesize textureBuf=_textureBuf;
@property(nonatomic) int height; // @synthesize height=_height;
@property(nonatomic) int width; // @synthesize width=_width;
@property(nonatomic) int strideInPixels; // @synthesize strideInPixels=_strideInPixels;
@property(nonatomic) int stride; // @synthesize stride=_stride;
@property(nonatomic) CDStruct_1b6d18a9 time; // @synthesize time=_time;
@property(nonatomic) int format; // @synthesize format=_format;

@end

@interface ByteRTCEncodedVideoFrame : NSObject
{
    int _width;
    int _height;
    long long _codecType;
    long long _pictureType;
    long long _timestampUs;
    long long _timestampDtsUs;
    long long _rotation;
    NSData *_data;
}

- (void).cxx_destruct;
@property(retain, nonatomic) NSData *data; // @synthesize data=_data;
@property(nonatomic) long long rotation; // @synthesize rotation=_rotation;
@property(nonatomic) int height; // @synthesize height=_height;
@property(nonatomic) int width; // @synthesize width=_width;
@property(nonatomic) long long timestampDtsUs; // @synthesize timestampDtsUs=_timestampDtsUs;
@property(nonatomic) long long timestampUs; // @synthesize timestampUs=_timestampUs;
@property(nonatomic) long long pictureType; // @synthesize pictureType=_pictureType;
@property(nonatomic) long long codecType; // @synthesize codecType=_codecType;

@end

@interface ByteRTCVideoCompositingRegion : NSObject
{
    _Bool _localUser;
    _Bool _screenStream;
    NSString *_uid;
    NSString *_roomId;
    double _x;
    double _y;
    double _width;
    double _height;
    long long _zOrder;
    double _alpha;
    long long _contentControl;
    unsigned long long _renderMode;
}

- (void).cxx_destruct;
@property(nonatomic) unsigned long long renderMode; // @synthesize renderMode=_renderMode;
@property(nonatomic) long long contentControl; // @synthesize contentControl=_contentControl;
@property(nonatomic) double alpha; // @synthesize alpha=_alpha;
@property(nonatomic) _Bool screenStream; // @synthesize screenStream=_screenStream;
@property(nonatomic) _Bool localUser; // @synthesize localUser=_localUser;
@property(nonatomic) long long zOrder; // @synthesize zOrder=_zOrder;
@property(nonatomic) double height; // @synthesize height=_height;
@property(nonatomic) double width; // @synthesize width=_width;
@property(nonatomic) double y; // @synthesize y=_y;
@property(nonatomic) double x; // @synthesize x=_x;
@property(copy, nonatomic) NSString *roomId; // @synthesize roomId=_roomId;
@property(copy, nonatomic) NSString *uid; // @synthesize uid=_uid;

@end

@interface ByteRTCTranscodingVideoConfig : NSObject
{
    _Bool _lowLatency;
    NSString *_codec;
    long long _width;
    long long _height;
    long long _fps;
    long long _gop;
    long long _kBitRate;
}

- (void).cxx_destruct;
@property(nonatomic) _Bool lowLatency; // @synthesize lowLatency=_lowLatency;
@property(nonatomic) long long kBitRate; // @synthesize kBitRate=_kBitRate;
@property(nonatomic) long long gop; // @synthesize gop=_gop;
@property(nonatomic) long long fps; // @synthesize fps=_fps;
@property(nonatomic) long long height; // @synthesize height=_height;
@property(nonatomic) long long width; // @synthesize width=_width;
@property(copy, nonatomic) NSString *codec; // @synthesize codec=_codec;

@end

@interface ByteRTCFrameExtendedData : NSObject
{
    unsigned long long _frameType;
    NSData *_extendedData;
    long long _extendedDataLen;
}

- (void).cxx_destruct;
@property(nonatomic) long long extendedDataLen; // @synthesize extendedDataLen=_extendedDataLen;
@property(retain, nonatomic) NSData *extendedData; // @synthesize extendedData=_extendedData;
@property(nonatomic) unsigned long long frameType; // @synthesize frameType=_frameType;

@end

@interface ByteRTCTranscodingAudioConfig : NSObject
{
    NSString *_codec;
    long long _sampleRate;
    long long _channels;
    long long _kBitRate;
    long long _profile;
}

+ (id)toStringWithProfile:(long long)arg1;
- (void).cxx_destruct;
@property(nonatomic) long long profile; // @synthesize profile=_profile;
@property(nonatomic) long long kBitRate; // @synthesize kBitRate=_kBitRate;
@property(nonatomic) long long channels; // @synthesize channels=_channels;
@property(nonatomic) long long sampleRate; // @synthesize sampleRate=_sampleRate;
@property(copy, nonatomic) NSString *codec; // @synthesize codec=_codec;

@end

@interface ByteRTCLiveTranscoding : NSObject
{
    unsigned long long _expectedMixingType;
    ByteRTCVideoCompositingLayout *_layout;
    ByteRTCTranscodingVideoConfig *_video;
    ByteRTCTranscodingAudioConfig *_audio;
    NSMutableDictionary *_advancedConfig;
    NSMutableDictionary *_authInfo;
    NSString *_url;
    NSString *_roomId;
    NSString *_userId;
}

+ (id)defaultTranscoding;
- (void).cxx_destruct;
@property(copy, nonatomic) NSString *userId; // @synthesize userId=_userId;
@property(copy, nonatomic) NSString *roomId; // @synthesize roomId=_roomId;
@property(copy, nonatomic) NSString *url; // @synthesize url=_url;
@property(retain, nonatomic) NSMutableDictionary *authInfo; // @synthesize authInfo=_authInfo;
@property(retain, nonatomic) NSMutableDictionary *advancedConfig; // @synthesize advancedConfig=_advancedConfig;
@property(retain, nonatomic) ByteRTCTranscodingAudioConfig *audio; // @synthesize audio=_audio;
@property(retain, nonatomic) ByteRTCTranscodingVideoConfig *video; // @synthesize video=_video;
@property(retain, nonatomic) ByteRTCVideoCompositingLayout *layout; // @synthesize layout=_layout;
@property(nonatomic) unsigned long long expectedMixingType; // @synthesize expectedMixingType=_expectedMixingType;

@end

@interface ByteRTCRoomStats : NSObject
{
    float _rxLostrate;
    float _txLostrate;
    long long _duration;
    long long _txBytes;
    long long _rxBytes;
    long long _txAudioKBitrate;
    long long _rxAudioKBitrate;
    long long _txVideoKBitrate;
    long long _rxVideoKBitrate;
    long long _userCount;
    long long _rtt;
}

@property(nonatomic) long long rtt; // @synthesize rtt=_rtt;
@property(nonatomic) float txLostrate; // @synthesize txLostrate=_txLostrate;
@property(nonatomic) float rxLostrate; // @synthesize rxLostrate=_rxLostrate;
@property(nonatomic) long long userCount; // @synthesize userCount=_userCount;
@property(nonatomic) long long rxVideoKBitrate; // @synthesize rxVideoKBitrate=_rxVideoKBitrate;
@property(nonatomic) long long txVideoKBitrate; // @synthesize txVideoKBitrate=_txVideoKBitrate;
@property(nonatomic) long long rxAudioKBitrate; // @synthesize rxAudioKBitrate=_rxAudioKBitrate;
@property(nonatomic) long long txAudioKBitrate; // @synthesize txAudioKBitrate=_txAudioKBitrate;
@property(nonatomic) long long rxBytes; // @synthesize rxBytes=_rxBytes;
@property(nonatomic) long long txBytes; // @synthesize txBytes=_txBytes;
@property(nonatomic) long long duration; // @synthesize duration=_duration;

@end

@interface ByteRTCSysStats : NSObject
{
    unsigned int _cpu_cores;
    double _cpu_app_usage;
    double _cpu_total_usage;
    double _memory_usage;
    unsigned long long _full_memory;
    unsigned long long _total_memory_usage;
    unsigned long long _free_memory;
    double _memory_ratio;
    double _total_memory_ratio;
}

@property(nonatomic) double total_memory_ratio; // @synthesize total_memory_ratio=_total_memory_ratio;
@property(nonatomic) double memory_ratio; // @synthesize memory_ratio=_memory_ratio;
@property(nonatomic) unsigned long long free_memory; // @synthesize free_memory=_free_memory;
@property(nonatomic) unsigned long long total_memory_usage; // @synthesize total_memory_usage=_total_memory_usage;
@property(nonatomic) unsigned long long full_memory; // @synthesize full_memory=_full_memory;
@property(nonatomic) double memory_usage; // @synthesize memory_usage=_memory_usage;
@property(nonatomic) double cpu_total_usage; // @synthesize cpu_total_usage=_cpu_total_usage;
@property(nonatomic) double cpu_app_usage; // @synthesize cpu_app_usage=_cpu_app_usage;
@property(nonatomic) unsigned int cpu_cores; // @synthesize cpu_cores=_cpu_cores;

@end

@interface ByteRTCLocalVideoStats : NSObject
{
    _Bool _isScreen;
    float _sentKBitrate;
    float _videoLossRate;
    long long _inputFrameRate;
    long long _sentFrameRate;
    long long _encoderOutputFrameRate;
    long long _rendererOutputFrameRate;
    long long _sentTargetKBitrate;
    long long _sentTargetFrameRate;
    long long _statsInterval;
    long long _rtt;
    long long _encodedBitrate;
    long long _encodedFrameWidth;
    long long _encodedFrameHeight;
    long long _encodedFrameCount;
    long long _codecType;
    long long _jitter;
}

@property(nonatomic) long long jitter; // @synthesize jitter=_jitter;
@property(nonatomic) _Bool isScreen; // @synthesize isScreen=_isScreen;
@property(nonatomic) long long codecType; // @synthesize codecType=_codecType;
@property(nonatomic) long long encodedFrameCount; // @synthesize encodedFrameCount=_encodedFrameCount;
@property(nonatomic) long long encodedFrameHeight; // @synthesize encodedFrameHeight=_encodedFrameHeight;
@property(nonatomic) long long encodedFrameWidth; // @synthesize encodedFrameWidth=_encodedFrameWidth;
@property(nonatomic) long long encodedBitrate; // @synthesize encodedBitrate=_encodedBitrate;
@property(nonatomic) long long rtt; // @synthesize rtt=_rtt;
@property(nonatomic) float videoLossRate; // @synthesize videoLossRate=_videoLossRate;
@property(nonatomic) long long statsInterval; // @synthesize statsInterval=_statsInterval;
@property(nonatomic) long long sentTargetFrameRate; // @synthesize sentTargetFrameRate=_sentTargetFrameRate;
@property(nonatomic) long long sentTargetKBitrate; // @synthesize sentTargetKBitrate=_sentTargetKBitrate;
@property(nonatomic) long long rendererOutputFrameRate; // @synthesize rendererOutputFrameRate=_rendererOutputFrameRate;
@property(nonatomic) long long encoderOutputFrameRate; // @synthesize encoderOutputFrameRate=_encoderOutputFrameRate;
@property(nonatomic) long long sentFrameRate; // @synthesize sentFrameRate=_sentFrameRate;
@property(nonatomic) long long inputFrameRate; // @synthesize inputFrameRate=_inputFrameRate;
@property(nonatomic) float sentKBitrate; // @synthesize sentKBitrate=_sentKBitrate;

@end

@interface ByteRTCRemoteVideoStats : NSObject
{
    _Bool _isScreen;
    float _videoLossRate;
    float _receivedKBitrate;
    long long _width;
    long long _height;
    long long _receivedFrameRate;
    long long _decoderOutputFrameRate;
    long long _renderOutputFrameRate;
    long long _stallCount;
    long long _stallDuration;
    long long _e2eDelay;
    long long _statsInterval;
    long long _rtt;
    long long _frozenRate;
    long long _videoIndex;
    long long _jitter;
}

@property(nonatomic) long long jitter; // @synthesize jitter=_jitter;
@property(nonatomic) long long videoIndex; // @synthesize videoIndex=_videoIndex;
@property(nonatomic) long long frozenRate; // @synthesize frozenRate=_frozenRate;
@property(nonatomic) long long rtt; // @synthesize rtt=_rtt;
@property(nonatomic) long long statsInterval; // @synthesize statsInterval=_statsInterval;
@property(nonatomic) _Bool isScreen; // @synthesize isScreen=_isScreen;
@property(nonatomic) long long e2eDelay; // @synthesize e2eDelay=_e2eDelay;
@property(nonatomic) long long stallDuration; // @synthesize stallDuration=_stallDuration;
@property(nonatomic) long long stallCount; // @synthesize stallCount=_stallCount;
@property(nonatomic) long long renderOutputFrameRate; // @synthesize renderOutputFrameRate=_renderOutputFrameRate;
@property(nonatomic) long long decoderOutputFrameRate; // @synthesize decoderOutputFrameRate=_decoderOutputFrameRate;
@property(nonatomic) long long receivedFrameRate; // @synthesize receivedFrameRate=_receivedFrameRate;
@property(nonatomic) float receivedKBitrate; // @synthesize receivedKBitrate=_receivedKBitrate;
@property(nonatomic) float videoLossRate; // @synthesize videoLossRate=_videoLossRate;
@property(nonatomic) long long height; // @synthesize height=_height;
@property(nonatomic) long long width; // @synthesize width=_width;

@end

@interface ByteRTCLocalAudioStats : NSObject
{
    float _audioLossRate;
    float _sentKBitrate;
    long long _recordSampleRate;
    long long _statsInterval;
    long long _rtt;
    long long _numChannels;
    long long _sentSampleRate;
    long long _jitter;
}

@property(nonatomic) long long jitter; // @synthesize jitter=_jitter;
@property(nonatomic) long long sentSampleRate; // @synthesize sentSampleRate=_sentSampleRate;
@property(nonatomic) long long numChannels; // @synthesize numChannels=_numChannels;
@property(nonatomic) long long rtt; // @synthesize rtt=_rtt;
@property(nonatomic) long long statsInterval; // @synthesize statsInterval=_statsInterval;
@property(nonatomic) long long recordSampleRate; // @synthesize recordSampleRate=_recordSampleRate;
@property(nonatomic) float sentKBitrate; // @synthesize sentKBitrate=_sentKBitrate;
@property(nonatomic) float audioLossRate; // @synthesize audioLossRate=_audioLossRate;

@end

@interface ByteRTCRemoteAudioStats : NSObject
{
    float _audioLossRate;
    float _receivedKBitrate;
    long long _stallCount;
    long long _stallDuration;
    long long _playoutSampleRate;
    long long _e2eDelay;
    long long _statsInterval;
    long long _rtt;
    long long _total_rtt;
    long long _quality;
    long long _jitterBufferDelay;
    long long _numChannels;
    long long _receivedSampleRate;
    long long _frozenRate;
    long long _concealedSamples;
    long long _concealmentEvent;
    long long _decSampleRate;
    long long _decDuration;
    long long _jitter;
}

@property(nonatomic) long long jitter; // @synthesize jitter=_jitter;
@property(nonatomic) long long decDuration; // @synthesize decDuration=_decDuration;
@property(nonatomic) long long decSampleRate; // @synthesize decSampleRate=_decSampleRate;
@property(nonatomic) long long concealmentEvent; // @synthesize concealmentEvent=_concealmentEvent;
@property(nonatomic) long long concealedSamples; // @synthesize concealedSamples=_concealedSamples;
@property(nonatomic) long long frozenRate; // @synthesize frozenRate=_frozenRate;
@property(nonatomic) long long receivedSampleRate; // @synthesize receivedSampleRate=_receivedSampleRate;
@property(nonatomic) long long numChannels; // @synthesize numChannels=_numChannels;
@property(nonatomic) long long jitterBufferDelay; // @synthesize jitterBufferDelay=_jitterBufferDelay;
@property(nonatomic) long long quality; // @synthesize quality=_quality;
@property(nonatomic) long long total_rtt; // @synthesize total_rtt=_total_rtt;
@property(nonatomic) long long rtt; // @synthesize rtt=_rtt;
@property(nonatomic) long long statsInterval; // @synthesize statsInterval=_statsInterval;
@property(nonatomic) long long e2eDelay; // @synthesize e2eDelay=_e2eDelay;
@property(nonatomic) long long playoutSampleRate; // @synthesize playoutSampleRate=_playoutSampleRate;
@property(nonatomic) long long stallDuration; // @synthesize stallDuration=_stallDuration;
@property(nonatomic) long long stallCount; // @synthesize stallCount=_stallCount;
@property(nonatomic) float receivedKBitrate; // @synthesize receivedKBitrate=_receivedKBitrate;
@property(nonatomic) float audioLossRate; // @synthesize audioLossRate=_audioLossRate;

@end

@interface ByteRTCAudioVolumeInfo : NSObject
{
    NSString *_uid;
    unsigned long long _volume;
}

- (void).cxx_destruct;
@property(nonatomic) unsigned long long volume; // @synthesize volume=_volume;
@property(copy, nonatomic) NSString *uid; // @synthesize uid=_uid;

@end

@interface ByteRTCSourceWantedData : NSObject
{
    long long _width;
    long long _height;
    long long _frameRate;
}

@property(nonatomic) long long frameRate; // @synthesize frameRate=_frameRate;
@property(nonatomic) long long height; // @synthesize height=_height;
@property(nonatomic) long long width; // @synthesize width=_width;

@end

@interface ByteRTCStreamEx : NSObject <ByteRTCStream>
{
    _Bool _isScreen;
    _Bool _hasVideo;
    _Bool _hasAudio;
    NSString *_userId;
    NSArray *_videoStreamDescriptions;
}

- (void).cxx_destruct;
@property(copy, nonatomic) NSArray *videoStreamDescriptions; // @synthesize videoStreamDescriptions=_videoStreamDescriptions;
@property(nonatomic) _Bool hasAudio; // @synthesize hasAudio=_hasAudio;
@property(nonatomic) _Bool hasVideo; // @synthesize hasVideo=_hasVideo;
@property(nonatomic) _Bool isScreen; // @synthesize isScreen=_isScreen;
@property(copy, nonatomic) NSString *userId; // @synthesize userId=_userId;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ByteRTCRemoteStreamSwitchEvent : NSObject
{
    _Bool _isScreen;
    _Bool _beforeVideoEnabled;
    _Bool _afterVideoEnabled;
    NSString *_uid;
    long long _beforeVideoIndex;
    long long _afterVideoIndex;
    long long _reason;
}

- (void).cxx_destruct;
@property(nonatomic) long long reason; // @synthesize reason=_reason;
@property(nonatomic) _Bool afterVideoEnabled; // @synthesize afterVideoEnabled=_afterVideoEnabled;
@property(nonatomic) _Bool beforeVideoEnabled; // @synthesize beforeVideoEnabled=_beforeVideoEnabled;
@property(nonatomic) long long afterVideoIndex; // @synthesize afterVideoIndex=_afterVideoIndex;
@property(nonatomic) long long beforeVideoIndex; // @synthesize beforeVideoIndex=_beforeVideoIndex;
@property(nonatomic) _Bool isScreen; // @synthesize isScreen=_isScreen;
@property(copy, nonatomic) NSString *uid; // @synthesize uid=_uid;

@end

@interface ByteRTCScreenCaptureParam : NSObject
{
    _Bool _captureMouseCursor;
    long long _width;
    long long _height;
    long long _frameRate;
    long long _bitrate;
}

@property(nonatomic) _Bool captureMouseCursor; // @synthesize captureMouseCursor=_captureMouseCursor;
@property(nonatomic) long long bitrate; // @synthesize bitrate=_bitrate;
@property(nonatomic) long long frameRate; // @synthesize frameRate=_frameRate;
@property(nonatomic) long long height; // @synthesize height=_height;
@property(nonatomic) long long width; // @synthesize width=_width;

@end

@interface ByteRTCScreenParam : NSObject
{
    long long _frameRate;
    long long _bitrate;
}

@property(nonatomic) long long bitrate; // @synthesize bitrate=_bitrate;
@property(nonatomic) long long frameRate; // @synthesize frameRate=_frameRate;

@end

@interface ByteRTCUser : NSObject
{
    NSString *_userId;
    NSString *_metaData;
}

- (void).cxx_destruct;
@property(copy, nonatomic) NSString *metaData; // @synthesize metaData=_metaData;
@property(copy, nonatomic) NSString *userId; // @synthesize userId=_userId;

@end

@interface ByteRTCUserInfo : NSObject
{
    NSString *_userId;
    NSString *_extraInfo;
}

- (void).cxx_destruct;
@property(copy, nonatomic) NSString *extraInfo; // @synthesize extraInfo=_extraInfo;
@property(copy, nonatomic) NSString *userId; // @synthesize userId=_userId;

@end

@interface ByteRTCRoomConfig : NSObject
{
    _Bool _isAutoPublish;
    _Bool _isAutoSubscribeAudio;
    _Bool _isAutoSubscribeVideo;
    long long _profile;
}

@property(nonatomic) _Bool isAutoSubscribeVideo; // @synthesize isAutoSubscribeVideo=_isAutoSubscribeVideo;
@property(nonatomic) _Bool isAutoSubscribeAudio; // @synthesize isAutoSubscribeAudio=_isAutoSubscribeAudio;
@property(nonatomic) _Bool isAutoPublish; // @synthesize isAutoPublish=_isAutoPublish;
@property(nonatomic) long long profile; // @synthesize profile=_profile;

@end

@interface ByteRTCLocalStreamStats : NSObject
{
    _Bool _is_screen;
    ByteRTCLocalAudioStats *_audio_stats;
    ByteRTCLocalVideoStats *_video_stats;
    unsigned long long _tx_quality;
    unsigned long long _rx_quality;
}

- (void).cxx_destruct;
@property(nonatomic) _Bool is_screen; // @synthesize is_screen=_is_screen;
@property(nonatomic) unsigned long long rx_quality; // @synthesize rx_quality=_rx_quality;
@property(nonatomic) unsigned long long tx_quality; // @synthesize tx_quality=_tx_quality;
@property(retain, nonatomic) ByteRTCLocalVideoStats *video_stats; // @synthesize video_stats=_video_stats;
@property(retain, nonatomic) ByteRTCLocalAudioStats *audio_stats; // @synthesize audio_stats=_audio_stats;

@end

@interface ByteRTCRemoteStreamStats : NSObject
{
    _Bool _is_screen;
    NSString *_uid;
    ByteRTCRemoteAudioStats *_audio_stats;
    ByteRTCRemoteVideoStats *_video_stats;
    unsigned long long _tx_quality;
    unsigned long long _rx_quality;
}

- (void).cxx_destruct;
@property(nonatomic) _Bool is_screen; // @synthesize is_screen=_is_screen;
@property(nonatomic) unsigned long long rx_quality; // @synthesize rx_quality=_rx_quality;
@property(nonatomic) unsigned long long tx_quality; // @synthesize tx_quality=_tx_quality;
@property(retain, nonatomic) ByteRTCRemoteVideoStats *video_stats; // @synthesize video_stats=_video_stats;
@property(retain, nonatomic) ByteRTCRemoteAudioStats *audio_stats; // @synthesize audio_stats=_audio_stats;
@property(copy, nonatomic) NSString *uid; // @synthesize uid=_uid;

@end

@interface ByteRTCRemoteStreamKey : NSObject
{
    NSString *_userId;
    NSString *_roomId;
    long long _streamIndex;
}

- (void).cxx_destruct;
@property(nonatomic) long long streamIndex; // @synthesize streamIndex=_streamIndex;
@property(copy, nonatomic) NSString *roomId; // @synthesize roomId=_roomId;
@property(copy, nonatomic) NSString *userId; // @synthesize userId=_userId;

@end

@interface ByteRTCAudioFormat : NSObject
{
    long long _sampleRate;
    long long _channel;
}

@property(nonatomic) long long channel; // @synthesize channel=_channel;
@property(nonatomic) long long sampleRate; // @synthesize sampleRate=_sampleRate;

@end

@interface ByteRTCVideoFrameInfo : NSObject
{
    long long _width;
    long long _height;
    long long _rotation;
}

@property(nonatomic) long long rotation; // @synthesize rotation=_rotation;
@property(nonatomic) long long height; // @synthesize height=_height;
@property(nonatomic) long long width; // @synthesize width=_width;

@end

@interface ByteRTCASRConfig : NSObject
{
    NSString *_appId;
    NSString *_userId;
    NSString *_accessToken;
    NSString *_secretKey;
    NSString *_cluster;
    long long _authorizationType;
}

- (void).cxx_destruct;
@property(nonatomic) long long authorizationType; // @synthesize authorizationType=_authorizationType;
@property(copy, nonatomic) NSString *cluster; // @synthesize cluster=_cluster;
@property(copy, nonatomic) NSString *secretKey; // @synthesize secretKey=_secretKey;
@property(copy, nonatomic) NSString *accessToken; // @synthesize accessToken=_accessToken;
@property(copy, nonatomic) NSString *userId; // @synthesize userId=_userId;
@property(copy, nonatomic) NSString *appId; // @synthesize appId=_appId;

@end

@interface ByteRTCRecordingProgress : NSObject
{
    unsigned long long _duration;
    unsigned long long _fileSize;
}

@property(nonatomic) unsigned long long fileSize; // @synthesize fileSize=_fileSize;
@property(nonatomic) unsigned long long duration; // @synthesize duration=_duration;

@end

@interface ByteRTCRecordingInfo : NSObject
{
    NSString *_filePath;
    long long _codecType;
    long long _width;
    long long _height;
}

- (void).cxx_destruct;
@property(nonatomic) long long height; // @synthesize height=_height;
@property(nonatomic) long long width; // @synthesize width=_width;
@property(nonatomic) long long codecType; // @synthesize codecType=_codecType;
@property(retain, nonatomic) NSString *filePath; // @synthesize filePath=_filePath;

@end

@interface ByteRTCRecordingConfig : NSObject
{
    NSString *_dirPath;
    long long _recordingFileType;
    long long _recordingType;
}

- (void).cxx_destruct;
@property(nonatomic) long long recordingType; // @synthesize recordingType=_recordingType;
@property(nonatomic) long long recordingFileType; // @synthesize recordingFileType=_recordingFileType;
@property(retain, nonatomic) NSString *dirPath; // @synthesize dirPath=_dirPath;

@end

@interface ByteRTCAudioMixingConfig : NSObject
{
    long long _type;
    long long _playCount;
}

@property(nonatomic) long long playCount; // @synthesize playCount=_playCount;
@property(nonatomic) long long type; // @synthesize type=_type;

@end

@interface ByteRTCSubscribeVideoConfig : NSObject
{
    long long _videoIndex;
    long long _priority;
}

@property(nonatomic) long long priority; // @synthesize priority=_priority;
@property(nonatomic) long long videoIndex; // @synthesize videoIndex=_videoIndex;

@end

@interface ByteRTCVideoPreprocessorConfig : NSObject
{
    long long _required_pixel_format;
}

@property(nonatomic) long long required_pixel_format; // @synthesize required_pixel_format=_required_pixel_format;

@end

@interface ByteRTCAudioPropertiesConfig : NSObject
{
    long long _interval;
}

@property(nonatomic) long long interval; // @synthesize interval=_interval;

@end

@interface ByteRTCAudioPropertiesInfo : NSObject
{
    long long _volume;
}

@property(nonatomic) long long volume; // @synthesize volume=_volume;

@end

@interface ByteRTCLocalAudioPropertiesInfo : NSObject
{
    long long _streamIndex;
    ByteRTCAudioPropertiesInfo *_audioPropertiesInfo;
}

- (void).cxx_destruct;
@property(retain, nonatomic) ByteRTCAudioPropertiesInfo *audioPropertiesInfo; // @synthesize audioPropertiesInfo=_audioPropertiesInfo;
@property(nonatomic) long long streamIndex; // @synthesize streamIndex=_streamIndex;

@end

@interface ByteRTCRemoteAudioPropertiesInfo : NSObject
{
    ByteRTCRemoteStreamKey *_streamKey;
    ByteRTCAudioPropertiesInfo *_audioPropertiesInfo;
}

- (void).cxx_destruct;
@property(retain, nonatomic) ByteRTCAudioPropertiesInfo *audioPropertiesInfo; // @synthesize audioPropertiesInfo=_audioPropertiesInfo;
@property(retain, nonatomic) ByteRTCRemoteStreamKey *streamKey; // @synthesize streamKey=_streamKey;

@end

@interface ReceiveRange : NSObject
{
    int _min;
    int _max;
}

@property(nonatomic) int max; // @synthesize max=_max;
@property(nonatomic) int min; // @synthesize min=_min;

@end

@interface Position : NSObject
{
    int _x;
    int _y;
    int _z;
}

@property(nonatomic) int z; // @synthesize z=_z;
@property(nonatomic) int y; // @synthesize y=_y;
@property(nonatomic) int x; // @synthesize x=_x;

@end

@interface Orientation : NSObject
{
    float _x;
    float _y;
    float _z;
}

@property(nonatomic) float z; // @synthesize z=_z;
@property(nonatomic) float y; // @synthesize y=_y;
@property(nonatomic) float x; // @synthesize x=_x;

@end

@interface HumanOrientation : NSObject
{
    Orientation *_forward;
    Orientation *_right;
    Orientation *_up;
}

- (void).cxx_destruct;
@property(retain, nonatomic) Orientation *up; // @synthesize up=_up;
@property(retain, nonatomic) Orientation *right; // @synthesize right=_right;
@property(retain, nonatomic) Orientation *forward; // @synthesize forward=_forward;

@end

@interface ByteRTCStreamSycnInfoConfig : NSObject
{
    int _repeatCount;
    long long _streamIndex;
    long long _streamType;
}

@property(nonatomic) long long streamType; // @synthesize streamType=_streamType;
@property(nonatomic) int repeatCount; // @synthesize repeatCount=_repeatCount;
@property(nonatomic) long long streamIndex; // @synthesize streamIndex=_streamIndex;

@end

@interface ForwardStreamConfiguration : NSObject
{
    NSString *_roomId;
    NSString *_token;
}

- (void).cxx_destruct;
@property(copy, nonatomic) NSString *token; // @synthesize token=_token;
@property(copy, nonatomic) NSString *roomId; // @synthesize roomId=_roomId;

@end

@interface ForwardStreamStateInfo : NSObject
{
    NSString *_roomId;
    long long _state;
    long long _error;
}

- (void).cxx_destruct;
@property(nonatomic) long long error; // @synthesize error=_error;
@property(nonatomic) long long state; // @synthesize state=_state;
@property(copy, nonatomic) NSString *roomId; // @synthesize roomId=_roomId;

@end

@interface ForwardStreamEventInfo : NSObject
{
    NSString *_roomId;
    long long _event;
}

- (void).cxx_destruct;
@property(nonatomic) long long event; // @synthesize event=_event;
@property(copy, nonatomic) NSString *roomId; // @synthesize roomId=_roomId;

@end

@interface ByteRTCRoom : NSObject <ByteRTCRoomDelegate>
{
    struct IRtcEngine *_rtcEngine;
    struct IRtcRoom *_rtcRoom;
    struct ITranscoderObserver *_transcoderObserver;
    struct ByteRtcRoomEventHandler *_byteRtcRoomEventHandler;
    id <ByteRTCRoomDelegate> _delegate;
    NSString *_roomId;
    long long _nowClientRole;
    ByteRTCLiveTranscoding *_transCoding;
    ByteRTCEngineKit *_engine;
}

- (void).cxx_destruct;
@property(nonatomic) __weak ByteRTCEngineKit *engine; // @synthesize engine=_engine;
@property(retain, nonatomic) ByteRTCLiveTranscoding *transCoding; // @synthesize transCoding=_transCoding;
@property(nonatomic) long long nowClientRole; // @synthesize nowClientRole=_nowClientRole;
@property(retain, nonatomic) NSString *roomId; // @synthesize roomId=_roomId;
@property(nonatomic) __weak id <ByteRTCRoomDelegate> delegate; // @synthesize delegate=_delegate;
- (id)TransCodeProfiletoJson:(id)arg1 Action:(id)arg2;
- (void)destroyResourceInternal;
- (void)destroyResource;
- (void)enableSubscribeSelf:(_Bool)arg1;
- (void)resumeForwardStreamToAllRooms;
- (void)pauseForwardStreamToAllRooms;
- (void)stopForwardStreamToRooms;
- (int)updateForwardStreamToRooms:(id)arg1;
- (int)startForwardStreamToRooms:(id)arg1;
- (long long)sendRoomBinaryMessage:(id)arg1;
- (long long)sendRoomMessage:(id)arg1;
- (long long)sendUserBinaryMessage:(id)arg1 message:(id)arg2;
- (long long)sendUserMessage:(id)arg1 message:(id)arg2;
- (int)setRemoteVideoCanvas:(id)arg1 withIndex:(long long)arg2 withCanvas:(id)arg3;
- (struct LiveTranscodingConfig)convertToTranscodingConfig:(id)arg1;
- (int)updateLiveTranscoding:(id)arg1;
- (int)stopLiveTranscoding;
- (int)startLiveTranscoding:(id)arg1 observer:(id)arg2;
- (int)muteRemoteVideo:(id)arg1 mute:(long long)arg2;
- (int)muteAllRemoteVideo:(long long)arg1;
- (void)resumeAllSubscribedStream:(long long)arg1;
- (void)pauseAllSubscribedStream:(long long)arg1;
- (void)muteRemoteAudio:(id)arg1 muteState:(long long)arg2;
- (void)muteAllRemoteAudio:(long long)arg1;
- (void)setAudioVolumeIndicationInterval:(long long)arg1;
- (int)enableAutoSubscribe:(unsigned long long)arg1 videoMode:(unsigned long long)arg2;
- (int)unSubscribeStream:(id)arg1 isScreen:(_Bool)arg2;
- (void)subscribeUserStream:(id)arg1 streamType:(long long)arg2 mediaType:(long long)arg3 videoConfig:(id)arg4;
- (int)subscribeStream:(id)arg1 subscribeConfig:(id)arg2;
- (int)unpublishScreen;
- (int)publishScreen;
- (int)publishScreen:(id)arg1;
- (int)unpublish;
- (int)publish;
- (int)renewToken:(id)arg1;
- (int)leaveRoom;
- (long long)clientRole;
- (_Bool)setUserVisibility:(_Bool)arg1;
- (int)setUserRole:(long long)arg1;
- (int)joinRoomByToken:(id)arg1 userInfo:(id)arg2 roomConfig:(id)arg3;
- (int)joinRoomByToken:(id)arg1 userInfo:(id)arg2 roomProfile:(long long)arg3;
- (id)getRoomId;
- (void)setRtcRoomDelegate:(id)arg1;
- (void)destroy;
- (void)dealloc;
- (id)initWithRtcRoom:(struct IRtcRoom *)arg1 roomId:(id)arg2;
- (void)rtcRoom:(id)arg1 onAudioStreamBanned:(id)arg2 isBanned:(_Bool)arg3;
- (void)rtcRoom:(id)arg1 onVideoStreamBanned:(id)arg2 isBanned:(_Bool)arg3;
- (void)rtcRoom:(id)arg1 onScreenVideoFramePlayStateChanged:(id)arg2 state:(unsigned long long)arg3;
- (void)rtcRoom:(id)arg1 onVideoFramePlayStateChanged:(id)arg2 state:(unsigned long long)arg3;
- (void)rtcRoom:(id)arg1 onAudioFramePlayStateChanged:(id)arg2 state:(unsigned long long)arg3;
- (void)rtcRoom:(id)arg1 onScreenFrameSendStateChanged:(id)arg2 state:(unsigned long long)arg3;
- (void)rtcRoom:(id)arg1 onVideoFrameSendStateChanged:(id)arg2 state:(unsigned long long)arg3;
- (void)rtcRoom:(id)arg1 onAudioFrameSendStateChanged:(id)arg2 state:(unsigned long long)arg3;
- (void)rtcRoom:(id)arg1 onRemoteVideoStateChanged:(id)arg2 withVideoState:(long long)arg3 withVideoStateReason:(long long)arg4;
- (void)rtcRoom:(id)arg1 onLocalVideoStateChanged:(long long)arg2 withStreamState:(long long)arg3 withStreamError:(long long)arg4;
- (void)rtcRoom:(id)arg1 onRemoteAudioStateChanged:(id)arg2 state:(long long)arg3 reason:(long long)arg4;
- (void)rtcRoom:(id)arg1 onLocalAudioStateChanged:(long long)arg2 error:(long long)arg3;
- (void)rtcRoom:(id)arg1 onUserMuteVideo:(id)arg2 withMuteState:(long long)arg3;
- (void)rtcRoom:(id)arg1 onFirstRemoteVideoFrameRendered:(id)arg2 withFrameInfo:(id)arg3;
- (void)rtcRoom:(id)arg1 onRemoteVideoSizeChanged:(id)arg2 withFrameInfo:(id)arg3;
- (void)rtcRoom:(id)arg1 onLocalVideoSizeChanged:(long long)arg2 withFrameInfo:(id)arg3;
- (void)rtcRoom:(id)arg1 onFirstLocalVideoFrameCaptured:(long long)arg2 withFrameInfo:(id)arg3;
- (void)rtcRoom:(id)arg1 onLiveTranscodingResult:(id)arg2 errorCode:(long long)arg3;
- (void)rtcRoom:(id)arg1 onRoomMessageSendResult:(long long)arg2 error:(long long)arg3;
- (void)rtcRoom:(id)arg1 onUserMessageSendResult:(long long)arg2 error:(long long)arg3;
- (void)rtcRoom:(id)arg1 onUserBinaryMessageReceived:(id)arg2 message:(id)arg3;
- (void)rtcRoom:(id)arg1 onUserMessageReceived:(id)arg2 message:(id)arg3;
- (void)rtcRoom:(id)arg1 onRoomBinaryMessageReceived:(id)arg2 message:(id)arg3;
- (void)rtcRoom:(id)arg1 onRoomMessageReceived:(id)arg2 message:(id)arg3;
- (void)rtcRoom:(id)arg1 onStreamPublishSuccess:(id)arg2 isScreen:(_Bool)arg3;
- (void)rtcRoom:(id)arg1 onStreamSubscribed:(long long)arg2 userId:(id)arg3 subscribeConfig:(id)arg4;
- (void)rtcRoom:(id)arg1 didStreamRemoved:(id)arg2 stream:(id)arg3 reason:(long long)arg4;
- (void)rtcRoom:(id)arg1 onStreamAdd:(id)arg2;
- (void)rtcRoom:(id)arg1 onFirstRemoteAudioFrame:(id)arg2;
- (void)rtcRoom:(id)arg1 onFirstLocalAudioFrame:(long long)arg2;
- (void)rtcRoom:(id)arg1 onRemoteStreamStats:(id)arg2;
- (void)rtcRoom:(id)arg1 onLocalStreamStats:(id)arg2;
- (void)rtcRoom:(id)arg1 onUserStopVideoCapture:(id)arg2;
- (void)rtcRoom:(id)arg1 onUserStartVideoCapture:(id)arg2;
- (void)rtcRoom:(id)arg1 onUserStopAudioCapture:(id)arg2;
- (void)rtcRoom:(id)arg1 onUserStartAudioCapture:(id)arg2;
- (void)rtcRoom:(id)arg1 didLocalAudioEnabled:(_Bool)arg2 byUid:(id)arg3;
- (void)rtcRoom:(id)arg1 onMuteAllRemoteVideo:(id)arg2 withMuteState:(long long)arg3;
- (void)rtcRoom:(id)arg1 onUserMuteAudio:(id)arg2 muteState:(long long)arg3;
- (void)rtcRoom:(id)arg1 onUserLeave:(id)arg2 reason:(unsigned long long)arg3;
- (void)rtcRoom:(id)arg1 onUserJoined:(id)arg2 elapsed:(long long)arg3;
- (void)rtcRoom:(id)arg1 onRoomStats:(id)arg2;
- (void)rtcRoom:(id)arg1 onAudioVolumeIndication:(id)arg2 totalRemoteVolume:(long long)arg3;
- (void)rtcRoom:(id)arg1 onRoomError:(long long)arg2;
- (void)rtcRoom:(id)arg1 onRoomWarning:(long long)arg2;
- (void)rtcRoom:(id)arg1 onLeaveRoomWithStats:(id)arg2;
- (void)rtcRoom:(id)arg1 onJoinRoomResult:(id)arg2 withUid:(id)arg3 errorCode:(long long)arg4 joinType:(long long)arg5 elapsed:(long long)arg6;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ByteRTCMultiRoomConfig : NSObject
{
    _Bool _isAutoSubscribeAudio;
    _Bool _isAutoSubscribeVideo;
    long long _profile;
}

@property(nonatomic) _Bool isAutoSubscribeVideo; // @synthesize isAutoSubscribeVideo=_isAutoSubscribeVideo;
@property(nonatomic) _Bool isAutoSubscribeAudio; // @synthesize isAutoSubscribeAudio=_isAutoSubscribeAudio;
@property(nonatomic) long long profile; // @synthesize profile=_profile;

@end

@interface LiveVideoParam : NSObject
{
    long long _width;
    long long _height;
    long long _fps;
    long long _bitRateKbps;
    long long _gop;
}

@property(nonatomic) long long gop; // @synthesize gop=_gop;
@property(nonatomic) long long bitRateKbps; // @synthesize bitRateKbps=_bitRateKbps;
@property(nonatomic) long long fps; // @synthesize fps=_fps;
@property(nonatomic) long long height; // @synthesize height=_height;
@property(nonatomic) long long width; // @synthesize width=_width;
- (id)init;

@end

@interface LiveDualStreamParam : NSObject
{
    long long _remoteDefaultStreamType;
    long long _isAutoSwitch;
    long long _autoSwitchUserNumber;
    LiveVideoParam *_hdVideoParam;
    long long _hdSubIndex;
    LiveVideoParam *_sdVideoParam;
    long long _sdSubIndex;
}

- (void).cxx_destruct;
@property(nonatomic) long long sdSubIndex; // @synthesize sdSubIndex=_sdSubIndex;
@property(retain, nonatomic) LiveVideoParam *sdVideoParam; // @synthesize sdVideoParam=_sdVideoParam;
@property(nonatomic) long long hdSubIndex; // @synthesize hdSubIndex=_hdSubIndex;
@property(retain, nonatomic) LiveVideoParam *hdVideoParam; // @synthesize hdVideoParam=_hdVideoParam;
@property(nonatomic) long long autoSwitchUserNumber; // @synthesize autoSwitchUserNumber=_autoSwitchUserNumber;
@property(nonatomic) long long isAutoSwitch; // @synthesize isAutoSwitch=_isAutoSwitch;
@property(nonatomic) long long remoteDefaultStreamType; // @synthesize remoteDefaultStreamType=_remoteDefaultStreamType;
- (id)init;

@end

@interface LiveRtcHost : NSObject
{
    NSMutableArray *_liveRtcApiHosts;
    NSMutableArray *_liveRtcSignalingHosts;
    NSMutableArray *_liveRtcAccessHosts;
}

- (void).cxx_destruct;
@property(copy, nonatomic) NSMutableArray *liveRtcAccessHosts; // @synthesize liveRtcAccessHosts=_liveRtcAccessHosts;
@property(copy, nonatomic) NSMutableArray *liveRtcSignalingHosts; // @synthesize liveRtcSignalingHosts=_liveRtcSignalingHosts;
@property(copy, nonatomic) NSMutableArray *liveRtcApiHosts; // @synthesize liveRtcApiHosts=_liveRtcApiHosts;
- (id)init;

@end

@interface LiveRtcExtInfo : NSObject
{
    NSString *_liveRtcAppId;
    NSString *_liveRtcAppSign;
    NSString *_liveRtcToken;
    NSString *_liveRtcRoomId;
    NSString *_liveRtcUserId;
    NSString *_liveRtcVendorName;
    long long _liveRtcVendorType;
    NSString *_liveRtcbusinessID;
    long long _liveMixType;
    long long _liveRtcMixBitrateKbps;
    long long _liveRtcParamMode;
    ByteRTCVideoSolution *_liveRtcVideoInputParam;
    ByteRTCVideoSolution *_liveRtcPerformanceLowVideoParam;
}

- (void).cxx_destruct;
@property(retain, nonatomic) ByteRTCVideoSolution *liveRtcPerformanceLowVideoParam; // @synthesize liveRtcPerformanceLowVideoParam=_liveRtcPerformanceLowVideoParam;
@property(retain, nonatomic) ByteRTCVideoSolution *liveRtcVideoInputParam; // @synthesize liveRtcVideoInputParam=_liveRtcVideoInputParam;
@property(nonatomic) long long liveRtcParamMode; // @synthesize liveRtcParamMode=_liveRtcParamMode;
@property(nonatomic) long long liveRtcMixBitrateKbps; // @synthesize liveRtcMixBitrateKbps=_liveRtcMixBitrateKbps;
@property(nonatomic) long long liveMixType; // @synthesize liveMixType=_liveMixType;
@property(copy, nonatomic) NSString *liveRtcbusinessID; // @synthesize liveRtcbusinessID=_liveRtcbusinessID;
@property(nonatomic) long long liveRtcVendorType; // @synthesize liveRtcVendorType=_liveRtcVendorType;
@property(copy, nonatomic) NSString *liveRtcVendorName; // @synthesize liveRtcVendorName=_liveRtcVendorName;
@property(copy, nonatomic) NSString *liveRtcUserId; // @synthesize liveRtcUserId=_liveRtcUserId;
@property(copy, nonatomic) NSString *liveRtcRoomId; // @synthesize liveRtcRoomId=_liveRtcRoomId;
@property(copy, nonatomic) NSString *liveRtcToken; // @synthesize liveRtcToken=_liveRtcToken;
@property(copy, nonatomic) NSString *liveRtcAppSign; // @synthesize liveRtcAppSign=_liveRtcAppSign;
@property(copy, nonatomic) NSString *liveRtcAppId; // @synthesize liveRtcAppId=_liveRtcAppId;
- (id)init;

@end

@interface LiveRtcSingleWrapper : NSObject <ByteRTCMonitorDelegate>
{
    _Bool _destroyPending;
    NSRecursiveLock *_traceLock;
    CDUnknownBlockType _traceCallBack;
    NSRecursiveLock *_logLock;
    CDUnknownBlockType _logCallBack;
    NSMutableDictionary *_byteRtcParams;
    NSString *_lastestAppId;
    LiveRtc *_liveRtcSingleInstance;
    LiveRtc *_liveRtcLastestInstance;
}

+ (void)setByteLog:(_Bool)arg1 callBack:(CDUnknownBlockType)arg2;
+ (void)setTTMonitorCallBack:(CDUnknownBlockType)arg1;
+ (void)destroyLiveRtc;
+ (id)sharedLiveRtcInstance:(id)arg1 delegate:(id)arg2 parameters:(id)arg3;
+ (long long)getMixType:(id)arg1;
+ (id)getAppId:(id)arg1;
+ (id)getInstance;
- (void).cxx_destruct;
@property(retain, nonatomic) LiveRtc *liveRtcLastestInstance; // @synthesize liveRtcLastestInstance=_liveRtcLastestInstance;
@property(retain, nonatomic) LiveRtc *liveRtcSingleInstance; // @synthesize liveRtcSingleInstance=_liveRtcSingleInstance;
@property _Bool destroyPending; // @synthesize destroyPending=_destroyPending;
@property(copy, nonatomic) NSString *lastestAppId; // @synthesize lastestAppId=_lastestAppId;
@property(retain, nonatomic) NSMutableDictionary *byteRtcParams; // @synthesize byteRtcParams=_byteRtcParams;
@property(copy, nonatomic) CDUnknownBlockType logCallBack; // @synthesize logCallBack=_logCallBack;
@property(retain, nonatomic) NSRecursiveLock *logLock; // @synthesize logLock=_logLock;
@property(copy, nonatomic) CDUnknownBlockType traceCallBack; // @synthesize traceCallBack=_traceCallBack;
@property(retain, nonatomic) NSRecursiveLock *traceLock; // @synthesize traceLock=_traceLock;
- (void)liveRtcDestroyAsync;
- (_Bool)isConsole;
- (void)onVerboseLogWithLevel:(unsigned long long)arg1 filename:(id)arg2 tag:(id)arg3 line:(int)arg4 functionName:(id)arg5 format:(id)arg6;
- (void)onMonitorLog:(id)arg1 withType:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface LiveRtc : ByteRTCEngineKit
{
    _Bool _isVideoExtSource;
    _Bool _isVideoExtRender;
    _Bool _isAudioExtSource;
    _Bool _isAudioExtRender;
    long long _liveRtcExpectedMixType;
    unsigned long long _audioInputSampleRate;
    unsigned long long _audioInputChannelNum;
    unsigned long long _audioOutputSampleRate;
    unsigned long long _audioOutputChannelNum;
    NSString *_liveRtcLastAppId;
    NSString *_liveRtcCurrentAppId;
    id <ByteRTCEngineDelegate> _LiveRtcDelegate;
    NSString *_liveRtcAccountID;
    NSString *_liveRtcToken;
    NSData *_liveRtcTokenData;
    NSString *_liveRtcSignKey;
    NSString *_liveRtcRoomId;
    NSString *_liveRtcUserId;
    NSString *_liveRtcbusinessID;
    NSString *_liveRtcConfig;
    NSString *_forceGlobalApiServer;
    LiveRtcHost *_liveRtcHost;
    long long _liveRtcParamMode;
    long long _liveRtcMixType;
    LiveVideoParam *_liveVideoParamServerDefine;
    LiveDualStreamParam *_liveDualStreamParam;
    LiveVideoParam *_liveVideoParam1V1Client;
    LiveVideoParam *_liveVideoParam1V1Server;
    LiveVideoParam *_liveRtcVideoInputParam;
    long long _liveRtcMixVideoBitRateKbps;
    NSString *_liveRtcMaxTranscodingCbInterval;
    LiveVideoParam *_liveVideoParamPerformanceProfileLow;
    NSLock *_apiLock;
    long long _currentState;
    NSMutableDictionary *_liveRtcVideoSinks;
    NSMutableDictionary *_liveRtcAudioSinks;
    NSMutableDictionary *_streamSubsMap;
}

+ (_Bool)isVaildRtcExtInfoJson:(id)arg1;
- (void).cxx_destruct;
@property(retain, nonatomic) NSMutableDictionary *streamSubsMap; // @synthesize streamSubsMap=_streamSubsMap;
@property(retain, nonatomic) NSMutableDictionary *liveRtcAudioSinks; // @synthesize liveRtcAudioSinks=_liveRtcAudioSinks;
@property(retain, nonatomic) NSMutableDictionary *liveRtcVideoSinks; // @synthesize liveRtcVideoSinks=_liveRtcVideoSinks;
@property long long currentState; // @synthesize currentState=_currentState;
@property(retain, nonatomic) NSLock *apiLock; // @synthesize apiLock=_apiLock;
@property(retain, nonatomic) LiveVideoParam *liveVideoParamPerformanceProfileLow; // @synthesize liveVideoParamPerformanceProfileLow=_liveVideoParamPerformanceProfileLow;
@property(copy, nonatomic) NSString *liveRtcMaxTranscodingCbInterval; // @synthesize liveRtcMaxTranscodingCbInterval=_liveRtcMaxTranscodingCbInterval;
@property(nonatomic) long long liveRtcMixVideoBitRateKbps; // @synthesize liveRtcMixVideoBitRateKbps=_liveRtcMixVideoBitRateKbps;
@property(retain, nonatomic) LiveVideoParam *liveRtcVideoInputParam; // @synthesize liveRtcVideoInputParam=_liveRtcVideoInputParam;
@property(retain, nonatomic) LiveVideoParam *liveVideoParam1V1Server; // @synthesize liveVideoParam1V1Server=_liveVideoParam1V1Server;
@property(retain, nonatomic) LiveVideoParam *liveVideoParam1V1Client; // @synthesize liveVideoParam1V1Client=_liveVideoParam1V1Client;
@property(retain, nonatomic) LiveDualStreamParam *liveDualStreamParam; // @synthesize liveDualStreamParam=_liveDualStreamParam;
@property(retain, nonatomic) LiveVideoParam *liveVideoParamServerDefine; // @synthesize liveVideoParamServerDefine=_liveVideoParamServerDefine;
@property(nonatomic) long long liveRtcMixType; // @synthesize liveRtcMixType=_liveRtcMixType;
@property(nonatomic) long long liveRtcParamMode; // @synthesize liveRtcParamMode=_liveRtcParamMode;
@property(retain, nonatomic) LiveRtcHost *liveRtcHost; // @synthesize liveRtcHost=_liveRtcHost;
@property(copy, nonatomic) NSString *forceGlobalApiServer; // @synthesize forceGlobalApiServer=_forceGlobalApiServer;
@property(copy, nonatomic) NSString *liveRtcConfig; // @synthesize liveRtcConfig=_liveRtcConfig;
@property(copy, nonatomic) NSString *liveRtcbusinessID; // @synthesize liveRtcbusinessID=_liveRtcbusinessID;
@property(copy, nonatomic) NSString *liveRtcUserId; // @synthesize liveRtcUserId=_liveRtcUserId;
@property(copy, nonatomic) NSString *liveRtcRoomId; // @synthesize liveRtcRoomId=_liveRtcRoomId;
@property(copy, nonatomic) NSString *liveRtcSignKey; // @synthesize liveRtcSignKey=_liveRtcSignKey;
@property(copy, nonatomic) NSData *liveRtcTokenData; // @synthesize liveRtcTokenData=_liveRtcTokenData;
@property(copy, nonatomic) NSString *liveRtcToken; // @synthesize liveRtcToken=_liveRtcToken;
@property(copy, nonatomic) NSString *liveRtcAccountID; // @synthesize liveRtcAccountID=_liveRtcAccountID;
@property(nonatomic) __weak id <ByteRTCEngineDelegate> LiveRtcDelegate; // @synthesize LiveRtcDelegate=_LiveRtcDelegate;
@property(copy, nonatomic) NSString *liveRtcCurrentAppId; // @synthesize liveRtcCurrentAppId=_liveRtcCurrentAppId;
@property(copy, nonatomic) NSString *liveRtcLastAppId; // @synthesize liveRtcLastAppId=_liveRtcLastAppId;
@property(nonatomic) unsigned long long audioOutputChannelNum; // @synthesize audioOutputChannelNum=_audioOutputChannelNum;
@property(nonatomic) unsigned long long audioOutputSampleRate; // @synthesize audioOutputSampleRate=_audioOutputSampleRate;
@property(nonatomic) unsigned long long audioInputChannelNum; // @synthesize audioInputChannelNum=_audioInputChannelNum;
@property(nonatomic) unsigned long long audioInputSampleRate; // @synthesize audioInputSampleRate=_audioInputSampleRate;
@property _Bool isAudioExtRender; // @synthesize isAudioExtRender=_isAudioExtRender;
@property _Bool isAudioExtSource; // @synthesize isAudioExtSource=_isAudioExtSource;
@property _Bool isVideoExtRender; // @synthesize isVideoExtRender=_isVideoExtRender;
@property _Bool isVideoExtSource; // @synthesize isVideoExtSource=_isVideoExtSource;
@property long long liveRtcExpectedMixType; // @synthesize liveRtcExpectedMixType=_liveRtcExpectedMixType;
- (_Bool)parseRtcVideoParams:(id)arg1;
- (_Bool)parseRtcExtInfoInternal:(id)arg1;
- (void)configVideoParams;
- (long long)setVideoProfiles:(id)arg1 orientationMode:(long long)arg2;
- (int)dualStreamUnsubOfUid:(id)arg1 streamID:(id)arg2 subVideo:(_Bool)arg3 subAudio:(_Bool)arg4;
- (int)dualStreamSubOfUid:(id)arg1 streamID:(id)arg2 subVideo:(_Bool)arg3 subAudio:(_Bool)arg4;
- (int)pullExternalAudioFrame:(void *)arg1 size:(int)arg2;
- (int)pushExternalAudioFrame:(void *)arg1 size:(int)arg2 timestamp:(double)arg3;
- (_Bool)pushExternalVideoFrame:(struct __CVBuffer *)arg1 time:(CDStruct_1b6d18a9)arg2 rotation:(long long)arg3 extendedData:(id)arg4 supplementaryInfo:(id)arg5;
- (void)setVideoFrameCallBack:(CDUnknownBlockType)arg1 userId:(id)arg2;
- (int)leaveChannel:(CDUnknownBlockType)arg1;
- (int)joinChannel;
- (_Bool)configEngine;
- (void)rtcExtInfoRefresh:(id)arg1;
- (id)rtcExtInfoObtain;
- (void)rtcExtInfoParse:(id)arg1;
- (void)dealloc;
- (id)initLiveRtcWithAppId:(id)arg1 delegate:(id)arg2 monitorDelegate:(id)arg3 parameters:(id)arg4;

@end

@interface LiveRtcVideoSink : NSObject <ByteRTCVideoSinkDelegate>
{
    NSString *_userId;
    CDUnknownBlockType _videoFrameCallback;
    LiveRtc *_owner;
}

- (void).cxx_destruct;
@property(nonatomic) __weak LiveRtc *owner; // @synthesize owner=_owner;
@property(copy, nonatomic) CDUnknownBlockType videoFrameCallback; // @synthesize videoFrameCallback=_videoFrameCallback;
@property(copy, nonatomic) NSString *userId; // @synthesize userId=_userId;
- (int)getRenderElapse;
- (void)renderPixelBuffer:(struct __CVBuffer *)arg1 rotation:(long long)arg2 extendedData:(id)arg3;
- (id)initWithUserId:(id)arg1 owner:(id)arg2 block:(CDUnknownBlockType)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface LiveRtcAudioSink : NSObject <ByteRTCAudioFrameObserver>
{
    NSString *_userId;
    LiveRtc *_owner;
}

- (void).cxx_destruct;
@property(nonatomic) __weak LiveRtc *owner; // @synthesize owner=_owner;
@property(copy, nonatomic) NSString *userId; // @synthesize userId=_userId;
- (void)onMixedAudioFrame:(id)arg1;
- (void)onPlaybackAudioFrameBeforeMixing:(id)arg1 audioFrame:(id)arg2;
- (void)onPlaybackAudioFrame:(id)arg1;
- (void)onRecordAudioFrame:(id)arg1;
- (id)initWithUserId:(id)arg1 owner:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface RTCI420Buffer : NSObject <RTCI420Buffer>
{
    scoped_refptr_b674d2a6 _i420Buffer;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (scoped_refptr_b674d2a6)nativeI420Buffer;
- (id)toI420;
@property(readonly, nonatomic) const char *dataV;
@property(readonly, nonatomic) const char *dataU;
@property(readonly, nonatomic) const char *dataY;
@property(readonly, nonatomic) int chromaHeight;
@property(readonly, nonatomic) int chromaWidth;
@property(readonly, nonatomic) int strideV;
@property(readonly, nonatomic) int strideU;
@property(readonly, nonatomic) int strideY;
@property(readonly, nonatomic) int height;
@property(readonly, nonatomic) int width;
- (id)initWithFrameBuffer:(scoped_refptr_b674d2a6)arg1;
- (id)initWithWidth:(int)arg1 height:(int)arg2 strideY:(int)arg3 strideU:(int)arg4 strideV:(int)arg5;
- (id)initWithWidth:(int)arg1 height:(int)arg2 dataY:(const char *)arg3 dataU:(const char *)arg4 dataV:(const char *)arg5;
- (id)initWithWidth:(int)arg1 height:(int)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface RTCMutableI420Buffer : RTCI420Buffer <RTCMutableI420Buffer>
{
}

@property(readonly, nonatomic) char *mutableDataV;
@property(readonly, nonatomic) char *mutableDataU;
@property(readonly, nonatomic) char *mutableDataY;

// Remaining properties
@property(readonly, nonatomic) int chromaHeight;
@property(readonly, nonatomic) int chromaWidth;
@property(readonly, nonatomic) const char *dataU;
@property(readonly, nonatomic) const char *dataV;
@property(readonly, nonatomic) const char *dataY;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) int height;
@property(readonly, nonatomic) int strideU;
@property(readonly, nonatomic) int strideV;
@property(readonly, nonatomic) int strideY;
@property(readonly) Class superclass;
@property(readonly, nonatomic) int width;

@end

@interface RTCVideoCapturer : NSObject
{
    id <RTCVideoCapturerDelegate> _delegate;
}

- (void).cxx_destruct;
@property(nonatomic) __weak id <RTCVideoCapturerDelegate> delegate; // @synthesize delegate=_delegate;
- (id)initWithDelegate:(id)arg1;

@end

@interface RTCVideoFrame : NSObject
{
    long long _rotation;
    long long _timeStampNs;
    _Bool _flip;
    int timeStamp;
    id <RTCVideoFrameBuffer> _buffer;
    NSData *_extendedData;
    long long _extendedDataLen;
}

- (void).cxx_destruct;
@property(nonatomic) long long extendedDataLen; // @synthesize extendedDataLen=_extendedDataLen;
@property(retain, nonatomic) NSData *extendedData; // @synthesize extendedData=_extendedData;
@property(nonatomic) _Bool flip; // @synthesize flip=_flip;
@property(nonatomic) int timeStamp; // @synthesize timeStamp;
@property(readonly, nonatomic) id <RTCVideoFrameBuffer> buffer; // @synthesize buffer=_buffer;
- (id)initWithBuffer:(id)arg1 rotation:(long long)arg2 timeStampNs:(long long)arg3;
- (id)initWithBuffer:(id)arg1 rotation:(long long)arg2 timeStampNs:(long long)arg3 extendedData:(id)arg4 extendedDataLen:(long long)arg5;
- (id)initWithPixelBuffer:(struct __CVBuffer *)arg1 scaledWidth:(int)arg2 scaledHeight:(int)arg3 cropWidth:(int)arg4 cropHeight:(int)arg5 cropX:(int)arg6 cropY:(int)arg7 rotation:(long long)arg8 timeStampNs:(long long)arg9;
- (id)initWithPixelBuffer:(struct __CVBuffer *)arg1 rotation:(long long)arg2 timeStampNs:(long long)arg3;
- (id)newI420VideoFrame;
@property(readonly, nonatomic) long long timeStampNs;
@property(readonly, nonatomic) long long rotation;
@property(readonly, nonatomic) int height;
@property(readonly, nonatomic) int width;

@end

@interface RTCDefaultShader : NSObject <RTCVideoViewShading>
{
    unsigned int _vertexBuffer;
    unsigned int _vertexArray;
    struct optional<RTCVideoRotation> _currentRotation;
    unsigned int _i420Program;
    unsigned int _nv12Program;
    unsigned int _rgbProgram;
    float _mvpMatrix[16];
}

- (id).cxx_construct;
- (void)applyShadingForFrameWithWidth:(int)arg1 height:(int)arg2 rotation:(long long)arg3 flip:(_Bool)arg4 plane:(unsigned int)arg5;
- (void)applyShadingForFrameWithWidth:(int)arg1 height:(int)arg2 rotation:(long long)arg3 flip:(_Bool)arg4 yPlane:(unsigned int)arg5 uvPlane:(unsigned int)arg6;
- (void)applyShadingForFrameWithWidth:(int)arg1 height:(int)arg2 rotation:(long long)arg3 flip:(_Bool)arg4 yPlane:(unsigned int)arg5 uPlane:(unsigned int)arg6 vPlane:(unsigned int)arg7;
- (_Bool)prepareVertexBufferWithRotation:(long long)arg1;
- (_Bool)createAndSetupRGBProgram;
- (_Bool)createAndSetupNV12Program;
- (_Bool)createAndSetupI420Program;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface RTCDisplayLinkTimer : NSObject
{
    CADisplayLink *_displayLink;
    CDUnknownBlockType _timerHandler;
}

- (void).cxx_destruct;
- (void)displayLinkDidFire:(id)arg1;
- (void)invalidate;
@property(nonatomic) _Bool isPaused;
- (void)dealloc;
- (id)initWithTimerHandler:(CDUnknownBlockType)arg1;

@end

@interface RTCEAGLVideoView : UIView <GLKViewDelegate, RTCVideoRenderer>
{
    RTCDisplayLinkTimer *_timer;
    EAGLContext *_glContext;
    _Bool _isDirty;
    id <RTCVideoViewShading> _shader;
    RTCNV12TextureCache *_nv12TextureCache;
    RTCI420TextureCache *_i420TextureCache;
    RTCRGBTextureCache *_rgbTextureCache;
    long long _lastDrawnFrameTimeStampNs;
    id <RTCVideoViewDelegate> _delegate;
    RTCVideoFrame *_videoFrame;
    GLKView *_glkView;
}

+ (void)setIsOnMac:(_Bool)arg1;
- (void).cxx_destruct;
@property(readonly, nonatomic) GLKView *glkView; // @synthesize glkView=_glkView;
@property(retain) RTCVideoFrame *videoFrame; // @synthesize videoFrame=_videoFrame;
@property(nonatomic) __weak id <RTCVideoViewDelegate> delegate; // @synthesize delegate=_delegate;
- (void)ensureGLContext;
- (void)willResignActive;
- (void)didBecomeActive;
- (void)teardownGL;
- (void)setupGL;
- (void)displayLinkTimerDidFire;
- (void)renderFrame:(id)arg1;
- (void)setSize:(struct CGSize)arg1;
- (void)glkView:(id)arg1 drawInRect:(struct CGRect)arg2;
- (void)layoutSubviews;
- (void)setNeedsDisplayInRect:(struct CGRect)arg1;
- (void)setNeedsDisplay;
- (void)dealloc;
- (_Bool)configure;
- (id)initWithCoder:(id)arg1 shader:(id)arg2;
- (id)initWithFrame:(struct CGRect)arg1 shader:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface RTCI420TextureCache : NSObject
{
    _Bool _hasUnpackRowLength;
    int _currentTextureSet;
    unsigned int _textures[6];
    struct vector<unsigned char, std::__1::allocator<unsigned char>> _planeBuffer;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)uploadFrameToTextures:(id)arg1;
- (void)uploadPlane:(const char *)arg1 texture:(unsigned int)arg2 width:(unsigned long long)arg3 height:(unsigned long long)arg4 stride:(int)arg5;
- (void)setupTextures;
- (void)dealloc;
- (id)initWithContext:(id)arg1;
@property(readonly, nonatomic) unsigned int vTexture;
@property(readonly, nonatomic) unsigned int uTexture;
@property(readonly, nonatomic) unsigned int yTexture;

@end

@interface RTCNV12TextureCache : NSObject
{
    struct __CVOpenGLESTextureCache *_textureCache;
    struct __CVBuffer *_yTextureRef;
    struct __CVBuffer *_uvTextureRef;
}

- (void)dealloc;
- (void)releaseTextures;
- (_Bool)uploadFrameToTextures:(id)arg1;
- (_Bool)loadTexture:(struct __CVBuffer **)arg1 pixelBuffer:(struct __CVBuffer *)arg2 planeIndex:(int)arg3 pixelFormat:(unsigned int)arg4;
- (id)initWithContext:(id)arg1;
@property(readonly, nonatomic) unsigned int uvTexture;
@property(readonly, nonatomic) unsigned int yTexture;

@end

@interface RTCRGBTextureCache : NSObject
{
    struct __CVOpenGLESTextureCache *_textureCache;
    struct __CVBuffer *_textureRef;
    struct __CVBuffer *_yTextureRef;
    struct __CVBuffer *_uvTextureRef;
}

- (void)dealloc;
- (void)releaseTextures;
- (_Bool)uploadFrameToTextures:(id)arg1;
- (_Bool)loadTexture:(struct __CVBuffer **)arg1 pixelBuffer:(struct __CVBuffer *)arg2 planeIndex:(int)arg3 pixelFormat:(unsigned int)arg4;
- (id)initWithContext:(id)arg1;
@property(readonly, nonatomic) unsigned int uvTexture;
@property(readonly, nonatomic) unsigned int yTexture;
@property(readonly, nonatomic) unsigned int texture;

@end

@interface RTCCVPixelBuffer : NSObject <RTCVideoFrameBuffer>
{
    int _width;
    int _height;
    int _bufferWidth;
    int _bufferHeight;
    int _cropWidth;
    int _cropHeight;
    int _cropX;
    int _cropY;
    struct __CVBuffer *_pixelBuffer;
}

+ (id)supportedPixelFormats;
@property(readonly, nonatomic) int cropHeight; // @synthesize cropHeight=_cropHeight;
@property(readonly, nonatomic) int cropWidth; // @synthesize cropWidth=_cropWidth;
@property(readonly, nonatomic) int cropY; // @synthesize cropY=_cropY;
@property(readonly, nonatomic) int cropX; // @synthesize cropX=_cropX;
@property(readonly, nonatomic) struct __CVBuffer *pixelBuffer; // @synthesize pixelBuffer=_pixelBuffer;
- (void)cropAndScaleARGBTo:(struct __CVBuffer *)arg1;
- (void)cropAndScaleNV12To:(struct __CVBuffer *)arg1 withTempBuffer:(char *)arg2;
- (id)toI420;
- (_Bool)cropAndScaleTo:(struct __CVBuffer *)arg1 withTempBuffer:(char *)arg2;
- (int)bufferSizeForCroppingAndScalingToWidth:(int)arg1 height:(int)arg2;
- (_Bool)requiresScalingToWidth:(int)arg1 height:(int)arg2;
- (_Bool)requiresCropping;
@property(readonly, nonatomic) int height;
@property(readonly, nonatomic) int width;
- (void)dealloc;
- (id)initWithPixelBuffer:(struct __CVBuffer *)arg1 adaptedWidth:(int)arg2 adaptedHeight:(int)arg3 cropWidth:(int)arg4 cropHeight:(int)arg5 cropX:(int)arg6 cropY:(int)arg7;
- (id)initWithPixelBuffer:(struct __CVBuffer *)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface RTCObjCVideoSourceAdapter : NSObject <RTCVideoCapturerDelegate>
{
    struct ObjCVideoTrackSource *_objCVideoTrackSource;
}

@property(nonatomic) struct ObjCVideoTrackSource *objCVideoTrackSource; // @synthesize objCVideoTrackSource=_objCVideoTrackSource;
- (void)capturer:(id)arg1 didCaptureVideoFrame:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface RTCDispatcher : NSObject
{
}

+ (id)dispatchQueueForType:(long long)arg1;
+ (_Bool)isOnQueueForType:(long long)arg1;
+ (void)dispatchAsyncOnType:(long long)arg1 block:(CDUnknownBlockType)arg2;
+ (void)initialize;

@end

@interface RTCNetworkMonitor : NSObject
{
    struct NetworkMonitorObserver *_observer;
    NSObject<OS_nw_path_monitor> *_pathMonitor;
    NSObject<OS_dispatch_queue> *_monitorQueue;
}

- (void).cxx_destruct;
- (void)dealloc;
- (id)initWithObserver:(struct NetworkMonitorObserver *)arg1;

@end

@interface NSDictionary (ByteRtc)
- (id)toJosnString;
@property(readonly, nonatomic) _Bool byteIsScreen;
@property(readonly, nonatomic) _Bool byteHasAudio;
@property(readonly, nonatomic) _Bool byteHasVideo;
@property(readonly, copy, nonatomic) NSString *byteUserId;
@property(readonly, copy, nonatomic) NSString *byteStreamId;
@end

@interface NSString (StdString)
+ (id)stringForStdString:(const basic_string_f3204e2a *)arg1;
+ (basic_string_f3204e2a)stdStringForString:(id)arg1;
@property(readonly, nonatomic) basic_string_f3204e2a stdString;
@end

